%h3 Inventory Product
= simple_nested_form_for @inventory_product, url: update_inventory_product_admins_path do |f|
  .row
    .col-md-3.brand
      = label_tag InventoryCategoryCaption.first.caption
      = select_tag "search_inventory[brand]", options_from_collection_for_select(InventoryCategory1.all, :id, :name, (params[:search_inventory] and params[:search_inventory][:brand])), include_blank: true
    .col-md-3.product
      = label_tag InventoryCategoryCaption.second.caption
      = select_tag "search_inventory[product]", option_groups_from_collection_for_select(InventoryCategory1.all, :inventory_category2s, :name, :id, :name, (params[:search_inventory] and params[:search_inventory][:product])), include_blank: true
    .col-md-3.category
      = label_tag InventoryCategoryCaption.third.caption
      = f.association :inventory_category3, collection: InventoryCategory2.all, as: :grouped_select, group_method: :inventory_category3s, group_label_method: :name, label_method: :name, value_method: :id, label: false
      
      / = select_tag "search_inventory[mst_inv_product][category3_id]", option_groups_from_collection_for_select(InventoryCategory2.all, :inventory_category3s, :name, :id, :name, (params[:search_inventory] and params[:search_inventory][:mst_inv_product][:category3_id])), include_blank: true
      
      / = f.input :country_id, collection: @continents, as: :grouped_select, group_method: :countries, , label_method: :company_name, value_method: :id
      / f.association :product_category, collection: ProductBrand.all, as: :grouped_select, group_method: :product_categories
  .row
    .col-md-3
      = f.input :serial_no, input_html: {value: InventorySerialItem.last.serial_no}
    .col-md-3
      = f.input :serial_no_order, input_html: {value: InventoryProduct.all.count + 1}
    .col-md-3
      = f.input :sku
    .col-md-3
      = f.input :legacy_code
  .row
    .col-md-6
      = f.input :description
  .row
    .col-md-3
      = f.input :model_no
    .col-md-3
      = f.input :product_no
    .col-md-3
      = f.input :spare_part_no
  .row
    .col-md-3
      = f.input :fifo, wrapper: :append
    .col-md-3
      = f.input :active, wrapper: :append
    .col-md-3
      = f.input :spare_part, wrapper: :append
    .col-md-3
      = f.label "Unit : "
      = f.select :unit_id, InventoryUnit.all.uniq{|i| i.id}.map{|o| [o.unit, o.id]}

  .row
    = f.input :created_by, as: :hidden, input_html: {value: current_user.id}
    = f.input :updated_by, as: :hidden, input_html: {value: current_user.id}
  %hr
  .row
    = f.simple_fields_for :inventory_product_info_attributes do |d|
      .row
        .col-md-3
          = d.label "Picture:"
          = d.file_field :picture, accept: 'image/png,image/gif,image/jpeg,application/pdf'
        .col-md-3
          = d.input :secondary_unit_id
        .col-md-3
          = check_box_tag(:issue_fractional_allowed)
          = label_tag(:issue_fractional_allowed, "Issue Fractional Allowed")
          / = d.input :issue_fractional_allowed, wrapper: :append
        .col-md-3
          = check_box_tag(:per_secondery_unit_conversion)
          = label_tag(:per_secondery_unit_conversion, "Per Secondery Unit Conversion")
          / = d.input :per_secondery_unit_conversion
      .row
        .col-md-3
          = check_box_tag(:need_serial)
          = label_tag(:need_serial, "Need Serial")
        .col-md-3
          = check_box_tag(:need_batch)
          = label_tag(:need_batch, "Need Batch")
        .col-md-3
          = d.label "Country:"
          = d.select :country_id, ProductSoldCountry.all.map {|c| [c.Country, c.id]}, label: "Country"
        .col-md-3
          = d.label "Manufacture:"
          = d.select :manufacture_id, Manufacture.all.map {|c| [c.manufacture, c.id]}, label: "Manufacture"
      .row
        .col-md-3
          = d.input :average_cost
        .col-md-3
          = d.input :standard_cost
        .col-md-3
          = d.label "Currency:"
          = d.select :currency_id, Currency.all.map {|c| [c.currency, c.id]}, label: "Currency"
      .row
        .col-md-6
          = d.input :remarks

  .row{style: "margin-bottom:20px;"}
    .col-md-8
      = f.submit "Save", class: "btn btn-success pull-right", id: "submit_new_inventory_product"

= initiate_table table_type: "table-hover table-bordered"  do
  = table_header ["No","Brand", "Product", "Category"]
  %tbody
    - @inventory_product_all.each_with_index do |inv_product, index|
      %tr
        %td= index+1
        %td
          = inv_product.inventory_category3.inventory_category2.inventory_category1.name
        %td
          = inv_product.inventory_category3.inventory_category2.name
        %td
          = inv_product.inventory_category3.name

= initiate_table table_type: "table-hover table-bordered"  do
  = table_header ["No","Serial no", "Serial no order", "Sku", "Legacy code", "Description", "Model no", "Product no", "Spare part no", "Fifo", "Active", "Spare Part", "Unit"]
  %tbody
    - @inventory_product_all.each_with_index do |inv_product, index|
      %tr
        %td= index+1
        %td
          = inv_product.serial_no
        %td
          = inv_product.serial_no_order
        %td
          = inv_product.sku
        %td
          = inv_product.legacy_code
        %td
          = inv_product.description
        %td
          = inv_product.model_no
        %td
          = inv_product.product_no
        %td
          = inv_product.spare_part_no
        %td
          = inv_product.fifo
        %td
          = inv_product.active
        %td
          = inv_product.spare_part
        %td
          = inv_product.unit_id

= initiate_table table_type: "table-hover table-bordered"  do
  = table_header ["No","Picture", "Secondary unit", "Issue Fractional Allowed", "Per Secondery Unit Conversion", "Need Serial", "Need Batch", "Country", "Manufacture", "Average cost", "Standard cost", "Currency", "Remarks"]
  %tbody
    - @inventory_product_all.each_with_index do |inv_product, index|
      %tr
        %td= index+1
        %td
          = inv_product.inventory_product_info.picture
        %td
          = inv_product.inventory_product_info.try(:inventory_unit).try(:unit)
        %td
          - if inv_product.inventory_product_info.issue_fractional_allowed == true
            YES
          - else
            NO
        %td
          - if inv_product.inventory_product_info.per_secondery_unit_conversion == true
            YES
          - else
            NO
        %td
          - if inv_product.inventory_product_info.need_serial == true
            YES
          - else
            NO
        %td
          - if inv_product.inventory_product_info.need_batch == true
            YES
          - else
            NO
        %td
          = inv_product.inventory_product_info.product_sold_country.try(:Country)
        %td
          = inv_product.inventory_product_info.manufacture.try(:manufacture)
        %td
          = inv_product.inventory_product_info.average_cost
        %td
          = inv_product.inventory_product_info.standard_cost
        %td
          = inv_product.inventory_product_info.currency.try(:currency)
        %td
          = inv_product.inventory_product_info.remarks