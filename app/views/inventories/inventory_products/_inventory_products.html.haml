= paginate @inventory_products, remote: true, method: :get

- if @inventory_products.any?
  %hr
  .row
    .col-md-1.strong{style: "text-align: center;"} No
    .col-md-2.strong Brand
    .col-md-2.strong Product
    .col-md-2.strong Category
    .col-md-1.strong.text-right Stock Qty
    .col-md-1.strong Currency
    .col-md-1.strong.text-right Available Qty
    .col-md-1.strong.text-right Stock cost
    .col-md-1.strong Action
  %hr

  - @inventory_products.each_with_index do |pr, index|
    - if @store
      - inventories = pr.inventories.map { |i| i if i.store_id.to_i == @store.id }.compact

    - if @select_options and @select_options["clicked_area"] == "prn"
      - last_prn_item = InventoryProduct.find(pr.id).last_prn_item
      - if last_prn_item.present?
        - content_for :last_prn_item_info, flush: true do
          %h4 Last PRN Information
          %dl.dl-horizontal
            %dt No:
            %dd= last_prn_item.inventory_prn.formated_prn_no
            %dt Quantity
            %dd= last_prn_item.quantity
            %dt Date
            %dd= last_prn_item.inventory_prn.created_at.strftime(INOCRM_CONFIG["short_date_format"])
            %dt Total PO quantity
            %dd= last_prn_item.inventory_po_items.sum(:quantity)
            %dt Created by
            %dd= last_prn_item.inventory_prn.created_by_user_full_name

    - content_for :inventory_p_more, flush: true do
      %ul
        %li
          %strong Unit:
          #{pr.inventory_unit.unit}
        %li
          %strong Manufacture:
          #{pr.inventory_product_info and pr.inventory_product_info.manufacture.try(:manufacture)}
        %li
          %strong Type:
          = pr.inventory_product_info.need_serial ? "Serial" : pr.inventory_product_info.need_batch ? "Batch" : "Non of Serial or Batch"
        %li
          %strong Serial code:
          #{pr.generated_serial_no}
        %li
          %strong Item code:
          = pr.generated_item_code
        %li
          %strong Model No:
          = pr.model_no
        %li
          %strong Product No:
          = pr.product_no
        %li
          %strong Part No:
          = pr.spare_part_no
      %strong Description:
      #{simple_format pr.description}
      %strong Remarks:
      #{pr.try(:remarks)}

    - content_for :select_result, flush: true do
      %dl.dl-horizontal
        %dt Item code:
        %dd= pr.generated_item_code
        %dt Item description:
        %dd= pr.description
        %dt Order unit
        %dd= pr.inventory_unit.unit

        - if @store
          %dt Stock in hand
          %dd= pr.inventories.map { |i| i.stock_quantity if i.store_id.to_i == @store.id }.compact.join(", ")

    .row
      .col-md-1{ "type"=> "button", "class"=> "btn btn-link has-popover", "data-toggle"=> "popover", "title"=> "Item code: #{pr.generated_item_code}", "data-content"=> yield(:inventory_p_more), "data-html" => "true", "data-trigger" => "hover", "data-placement" => "right" }= index+1
      .col-md-2 #{pr.category1_name}
      .col-md-2= pr.category2_name
      .col-md-2= pr.category3_name

      - if @store
        .col-md-1.text-right= inventories.sum{|i| i.stock_quantity.to_f }
      .col-md-1= pr.inventory_product_info.currency_type

      - if @store
        .col-md-1.text-right= inventories.sum{|i| i.available_quantity.to_f }
      .col-md-1.text-right
        - if pr.inventory_product_info.need_serial
          = pr.grn_serial_items.sum{|g| g.grn_item.current_unit_cost.to_f + g.inventory_serial_item.inventory_serial_items_additional_costs.sum{|c| c.cost.to_f }}

        - elsif pr.inventory_product_info.need_batch
          = pr.grn_batches.sum{|g| g.grn_item.current_unit_cost.to_f * g.remaining_quantity.to_f }

        - else
          = pr.grn_items.sum{|g| g.remaining_quantity.to_f * g.current_unit_cost.to_f }
      - if params[:from_where] == "inventories"
        .col-md-1
          - if pr.inventory_product_info.need_serial
            - if InventoryProduct.find_by_id(pr.id).inventory_serial_items.count > 0
              = link_to "Serial", inventories_admins_searches_path(select_action: "select_serial_items", inv_pro_id: pr.id, store: params[:store_id] ), class: "btn-link"
          - if pr.inventory_product_info.need_batch
            - if InventoryProduct.find_by_id(pr.id).inventory_batches.count > 0
              = link_to "Batch", inventories_admins_searches_path(select_action: "select_batches", inv_pro_id: pr.id, store: params[:store_id] ), class: "btn-link"
          - if !(pr.inventory_product_info.need_serial or pr.inventory_product_info.need_batch)
            - if InventoryProduct.find_by_id(pr.id).grn_items.count > 0
              = link_to "Non", inventories_admins_searches_path(select_action: "select_non_serial_or_batch", inv_pro_id: pr.id, store: params[:store_id] ), class: "btn-link"
      - else
        .col-md-1= link_to "Select", (@select_path || "#"), (@select_options || {}).merge({data: {content: (yield :select_result ), productid: pr.id, prncontent: (yield :last_prn_item_info)}})

    %hr
  .row.strong
    .col-md-5.text-right Totals
    .col-md-3.text-right= @total_stock_quantity
    .col-md-2.text-right= @total_available_quantity
    .col-md-1.text-right= @total_sum_of_stock_cost

= paginate @inventory_products, remote: true, method: :get