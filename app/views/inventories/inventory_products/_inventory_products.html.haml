= paginate @inventory_products, remote: true, method: :get

- if @inventory_products.any?
  %hr
  %table.table.table-striped
    %thead
      %th No
      - inventory_search_types(params[:from_where]).except(:tooltip).keys.each do |key|
        %th= key.to_s.humanize
      %th Action

    %tbody
      - @inventory_products.each_with_index do |inventory_product, index|

        - if @select_options and @select_options["compulsory_single_path"].present?
          - @select_path = [ @select_options["compulsory_single_path"], { product_id: inventory_product.id, store_id: @store.try(:id), type: inventory_product.product_type.squish }.to_query ].join("?")

        - if @select_options and @select_options["clicked_area"] == "prn"
          - last_prn_item = InventoryProduct.find(inventory_product.id).last_prn_item

          - if last_prn_item.present?
            - content_for :last_prn_item_info, flush: true do

              %h4 Last PRN Information
              %dl.dl-horizontal
                %dt No:
                %dd= last_prn_item.inventory_prn.formated_prn_no
                %dt Quantity
                %dd= last_prn_item.quantity
                %dt Date
                %dd= last_prn_item.inventory_prn.created_at.strftime(INOCRM_CONFIG["short_date_format"])
                %dt Total PO quantity
                %dd= last_prn_item.inventory_po_items.sum(:quantity)
                %dt Created by
                %dd= last_prn_item.inventory_prn.created_by_user_full_name


        - content_for :select_result, flush: true do
          %dl.dl-horizontal
            %dt Brand:
            %dd= inventory_product.category1_name
            %dt Item code:
            %dd= inventory_search_types(params[:from_where], inventory_product)[:item_code]
            %dt Item description:
            %dd= inventory_product.description
            %dt Order unit
            %dd= inventory_product.inventory_unit.unit

            - if @store
              %dt Stock in hand
              %dd= inventory_search_types(params[:from_where], inventory_product, store_id: @store.id ){|more_info| more_info[:stock_quantity]}

            - if @select_options and @select_options["from_where"] == "prn"
              %dt Item type
              %dd= inventory_product.product_type

        - content_for :inventory_p_more, flush: true do
          %dl.dl-horizontal
            - inventory_search_types(params[:from_where], inventory_product).slice(:tooltip)[:tooltip].each do |key, value|
              %dt= key.to_s.humanize
              %dd= value

        %tr
          %td{ "type"=> "button", "class"=> "btn btn-link has-popover", "data-toggle"=> "popover", "title"=> "Item code: #{inventory_search_types(params[:from_where], inventory_product)[:item_code]}", "data-content"=> yield(:inventory_p_more), "data-html" => "true", "data-trigger" => "hover", "data-placement" => "right" }
            - if params[:page]
              = (index+1)+ 10*(params[:page].to_i-1)
            - else
              = (index+1)
          - inventory_search_types(params[:from_where], inventory_product, store_id: @store.try(:id)).except(:tooltip).values.each do |value|
            %td{class: "#{value[:html][:class_attr] if value.is_a?(Hash) and value[:html].present? }"}= value.is_a?(Hash) ? value[:value] : value

          %td= link_to "Select", (@select_path || "#"), (@select_options || {}).merge({data: {content: (yield :select_result ), productid: inventory_product.id, prncontent: (yield :last_prn_item_info)}})
  %hr
- if @store.present?
  %h4
    Total cost:
    = number_to_currency @total_stock_cost, unit: ""

= paginate @inventory_products, remote: true, method: :get