spare_part_count = 10

headers = ["Company Name", "Customer Type (Corporate/Walking)", "Problem Category", "Customer Address", "District", 
  "Customer Email", "Customer Contact No", "Product Brand", "Category", "Model Number", "Product Number", "Product Serial No", "SLA", "Job Number (Partner)", "CASE ID / HP Advisory", "Created at", "Log Date", "Logged by", "Job Finished At", "Customer Support Representative", "Engineer Assign Date", "Start Date", "Start Action", "Problem Description", "Support Group (SBU)", "Engineer Name"]

spare_part_headers = ["Part Number", "Part Description", "Event No", "Item Code", "Ordered from manufacture at", "Collected from Manufacture at", "Requested at", "Requested by"]
total_spare_part_headers = []
spare_part_count.times.each{|s| spare_part_headers.each{|d| total_spare_part_headers << "#{s+1} - #{d}" } }

headers.concat(total_spare_part_headers)
headers.concat(["Engrs Finished Date & Time", "Call Status", "Hold", "Hold Reason", "Re-Open Count", "Chargeable", "Total Amount", "Final Resolution", 'Last part received by engineer', "No Of Used Manufacture Parts", "No Of Used Store Parts", "No Of Used OnLoan Parts",  "Resolved Date", "Close Approval Request Date", "Last Customer Feedback Taken By", "QC Reject Date", "QC Approval Date"])

wb = xlsx_package.workbook
wb.add_worksheet(name: "ERP report") do |sheet|
  sheet.add_row headers

  @ticket.each do |ticket|
    product = ticket.products.first

    ticket_content = [ticket.customer.full_name, boolean_in_word(ticket.customer.organization.present?, "Corporate", "Walking"), ticket.problem_category_name, ticket.customer.full_address, ticket.customer.try(:district_name) ]

    customer_contact_values = ticket.customer.contact_type_values
    if customer_contact_values.select{|ct| [2, 3].include?(ct.contact_type_id) }.empty?
      2.times.each{|e| ticket_content << ""}
    else
      contact_emails = []
      contact_numbers = []
      customer_contact_values.select{ |ct| [2, 3].include?(ct.contact_type_id) }.each do |contact|
        contact_numbers << contact.value if contact.contact_type_id == 2
        contact_emails << contact.value if contact.contact_type_id == 3

      end
      ticket_content << contact_emails.compact.join(", ")
      ticket_content << contact_numbers.compact.join(", ")
    end

    product_info = [product.brand_name, product.category_full_name_index, product.model_no, product.product_no, product.serial_no, ticket.sla_description, ticket.support_ticket_no, ticket.hp_cases.map { |h| h.case_id }.join(", ")]

    ticket_content.concat(product_info)

    ticket_content << ticket.created_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}")
    ticket_content << ticket.logged_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}")
    ticket_content << ticket.logged_by_user
    ticket_content << (ticket.job_finished_at and ticket.job_finished_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}"))
    ticket_content << ticket.ticket_payment_receiveds.map(&:received_by_user_full_name).join(", ")
    ticket_content << (ticket.owner_engineer.present? ? ticket.owner_engineer.created_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}") : "")
    ticket_content << (ticket.job_started_at.present? ? ticket.job_started_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}") : "")
    ticket_content << ticket.ticket_start_action.try(:action)
    ticket_content << ticket.problem_description
    ticket_content << ticket.owner_engineer.try(:sbu_name)
    ticket_content << ticket.owner_engineer.try(:full_name)

    spare_part_count.times.each do |e|
      spare_part_info = []
      sp = ticket.ticket_spare_parts.to_a[e]
      if sp.present?
        spare_part_info << sp.spare_part_no
        spare_part_info << sp.spare_part_description
        spare_part_info << (sp.request_from == 'M' ? sp.ticket_spare_part_manufacture.try(:event_no) : "")
        spare_part_info << sp.inventory_product_generated_serial_item
        status_actions = {}
        if sp.ticket_spare_part_status_actions.any?
          sp.ticket_spare_part_status_actions.select{|a| [1,2,3].include?(a.action_id)}.each_with_index do |action, index|
            status_actions[1] = action.done_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}") if action.status_id == 2

            status_actions[2] = action.done_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}") if action.status_id == 3
            if action.status_id == 1
              status_actions[3] = action.done_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}") # Request
              status_actions[4] = User.cached_find_by_id(action.done_by).try(:full_name)
            end
          end
        end
        4.times.each{|e| status_actions[(e+1)] ||= '' }
        spare_part_info.concat(Hash[status_actions.sort].values)
      else
        8.times.each{|e| spare_part_info << ""}
      end
      ticket_content.concat(spare_part_info)
    end

    ticket_content << (ticket.job_finished_at ? ticket.job_finished_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}") : "")
    ticket_content << ticket.ticket_status_name
    ticket_content << boolean_in_word(ticket.status_hold, "Yes", "No")
    ticket_content << (ticket.status_hold ? ticket.reason.try(:reason) : "" )
    ticket_content << ticket.re_open_count
    ticket_content << boolean_in_word(ticket.cus_chargeable, "Yes", "No")

    tot_amount = 0.00
    ded_amount = 0.00
    ans = 0.00

    tot_amount = ticket.final_invoice.try(:total_amount).try(:to_f)
    ded_amount = ticket.final_invoice.try(:total_deduction).try(:to_f)
    if ticket.tryfinal_invoice.try(:total_amount) and ticket.final_invoice.try(:total_deduction)
      ans = tot_amount - ded_amount
      ticket_content << number_with_precision(ans, precision: 2)
    else
      ticket_content << number_with_precision(0, precision: 2)
    end
    ticket_content << ticket.resolution_summary

    last_spare_part = ticket.ticket_spare_parts.last
    last_part_infos = {}
    if last_spare_part.present?
      case last_spare_part.request_from
       when "M"
        last_spare_part.ticket_spare_part_status_actions.select{|a| [ 4 ].include?(a.action_id) }.each_with_index do |action, index|
          last_part_infos[1] = action.done_at.to_datetime.strftime("#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}")
        end

      when "S"
        last_part_infos[1] = last_spare_part.available_mail_sent_at.try :strftime, "#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}"

      end
    end
    [1].each{ |e| last_part_infos[e] ||= ''  }
    ticket_content.concat(Hash[last_part_infos.sort].values)


    ticket_content << ticket.spare_part_counts[:manufacture]
    ticket_content << ticket.spare_part_counts[:store]
    ticket_content << ticket.spare_part_counts[:onloan]
    ticket_content << ticket.job_completed_at.try(:strftime, "#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}")

    user_actions = {}
    ticket.user_ticket_actions.select{|u| [55, 58, 67].include?(u.action_id) }.each do |u|
      if u.action_id == 58
        user_actions[u.action_id.to_i] = u.action_by_name
      else
        user_actions[u.action_id.to_i] = u.formatted_action_date
      end
    end

    [55, 58, 67].each{ |e| user_actions[e] ||= ''  }
    ticket_content.concat(Hash[user_actions.sort].values)

    ticket_content << ticket.qc_passed_at.try(:strftime, "#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}")

    sheet.add_row ticket_content
  end
end

# https://github.com/randym/axlsx/blob/master/examples/example.rb
