- spare_part_count = 10
%table{:border => "1"}
  %thead
    %tr
      %th Company Name
      %th Customer Type (Corporate/Walking)
      %th Customer Address
      %th District
      %th Customer Email
      %th Customer Contact No
      %th Product Brand
      %th Category
      %th Model Number
      %th Product Number
      %th Product Serial No
      %th SLA
      %th Job Number (Partner)
      %th CASE ID / HP Advisory
      %th Log Date
      %th Engineer Assign Date
      %th Start Date
      %th Start Action
      %th Problem Description
      %th Support Group (SBU)
      %th Engineer Name

      - spare_part_count.times.each do |i|
        %th #{i+1} Part NumberIn Use
        %th #{i+1} Part Description
        %th #{i+1} event No.
        %th #{i+1} Item Code

      %th Engrs Finished Date & Time
      %th Call Status
      %th Hold
      %th Hold Reason
      %th Re-Open Count
      %th Chargeable
      %th Total Amount
      %th Final Resolution
  %tbody
    - @ticket.each do |ticket|
      %tr
        %td= ticket.customer.full_name
        %td= boolean_in_word ticket.customer.organization.present?, "Corporate", "Walking"
        %td{style: "text-align: left;"}= ticket.customer.full_address
        %td= ticket.customer.try(:district).try(:name)
        - if ticket.customer.contact_type_values.blank?
          - 2.times.each do |count|
            %td
        - ticket.customer.contact_type_values.each do |contact|
          %td
            - if contact.contact_type_id == 3
              #{contact.value}
          %td
            - if contact.contact_type_id == 2
              #{contact.value}
        %td
          = ticket.products.map { |p| p.brand_name }.join(", ")
        %td
          = ticket.products.map { |p| p.category_full_name_index }.join(", ")
        %td
          = ticket.products.map { |p| p.model_no }.join(", ")
        %td
          = ticket.products.map { |p| p.product_no }.join(", ")
        %td
          = ticket.products.map { |p| p.serial_no }.join(", ")
            
        %td
          // SLA
          = ticket.sla_description
        %td
          // Job Number (Partner)
          = ticket.support_ticket_no
        %td
          = ticket.hp_cases.map { |h| h.case_id }.join(", ")

        %td
          = ticket.logged_at.to_date.strftime(INOCRM_CONFIG["short_date_format"])
        %td
          - if  ticket.owner_engineer.present?
            = ticket.owner_engineer.created_at.to_date.strftime(INOCRM_CONFIG["short_date_format"])
        %td
          // Start Date & Time
          - if ticket.job_started_at.present?
            = ticket.job_started_at.to_date.strftime(INOCRM_CONFIG["short_date_format"])
        %td
          // Start Action
          = ticket.ticket_start_action.try(:action)
        %td
          // Problem Description
          = ticket.problem_description
        %td
          // Support Group (SBU)
          = ticket.owner_engineer.try(:sbu_name)
        %td
          // Engineer Name (Last)
          = ticket.owner_engineer.try(:full_name)

        - spare_part_count.times.each do |e|
          - sp = ticket.ticket_spare_parts.to_a[e]
          - if sp.present?
            %td
              // 1st Part NumberIn Use
              = sp.spare_part_no
            %td
              // 1st Part Description
              = sp.spare_part_description
            %td
              // 1st event No.
              = sp.request_from == 'M' ? sp.ticket_spare_part_manufacture.try(:event_no) : ""
            %td
              // 1st Item Code
              = sp.inventory_product_generated_serial_item
          - else
            - 4.times.each do |count|
              %td

        %td
          // Engrs Finished Date & Time
          = ticket.try(:job_finished_at).try(:strftime, "#{INOCRM_CONFIG['short_date_format']} #{INOCRM_CONFIG['time_format']}")
        %td
          // Call Status
          = ticket.ticket_status_name
        %td
          // Hold
          = boolean_in_word ticket.status_hold, "Yes", "No"
        %td
          - if ticket.status_hold
            = ticket.reason.try(:reason)
        %td
          // Re-Open Count
          = ticket.re_open_count
        %td
          // Chargeable
          = boolean_in_word ticket.cus_chargeable, "Yes", "No"
        %td
          // Total Amount
          - tot_amount = 0.00
          - ded_amount = 0.00
          - ans = 0.00

          - tot_amount = ticket.final_invoice.try(:total_amount).try(:to_f)
          - ded_amount = ticket.final_invoice.try(:total_deduction).try(:to_f)
          - if ticket.tryfinal_invoice.try(:total_amount) and ticket.final_invoice.try(:total_deduction)
            - ans = tot_amount - ded_amount
            = number_with_precision ans, precision: 2
          - else
            = number_with_precision 0, precision: 2
        %td
          // Final Resolution
          = ticket.resolution_summary