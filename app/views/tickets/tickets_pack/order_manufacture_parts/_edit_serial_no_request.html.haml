- ticket = @ticket
- product = @product

- uri = URI(request.url)
- uri_path = (uri.path == "/tickets/edit_serial") ? uri.path : uri.path == "/tickets/call_mf_order_template" ? "/tickets/order_manufacture_parts" : "/#{params[:controller].split('/').last}/#{params[:action]}"
- bpm_params_variables = Rails.cache.fetch([uri_path, params[:task_id]])[:bpm_input_variables].present? ? Hash[ Rails.cache.fetch([uri_path, params[:task_id]])[:bpm_input_variables] ] : {}
= Rails.cache.fetch([uri_path, params[:task_id]]).inspect

%fieldset
  %legend Edit Serial No
  - if product.ticket_contracts.any?
    .row.strong
      .col-md-2 Serial No
      .col-md-2 Category
      .col-md-1 Model No
      .col-md-1 Product No
      .col-md-4 Description
      .col-md-2 Select
    %hr

    - product.ticket_contracts.each do |ticket_contract|
      .row
        .col-md-12
          .panel.panel-default
            .panel-heading
              .panel-title Contract No: #{ticket_contract.contract_no}
            .panel-body
              - ticket_contract.products.each do |product|
                .row
                  .col-md-2= product.serial_no
                  .col-md-2= product.category_full_name("|")
                  .col-md-1= product.model_no
                  .col-md-1= product.product_no
                  .col-md-4= product.description
                  .col-md-2= link_to "Select", update_edit_serial_tickets_path({selected_product: true, product_id: product.id, process_id: Rails.cache.fetch([uri_path, params[:task_id]])[:process_id], task_id: Rails.cache.fetch([uri_path, params[:task_id]])[:task_id], owner: Rails.cache.fetch([uri_path, params[:task_id]])[:owner] }.merge(bpm_params_variables)), method: :post
                %hr

  - elsif product.owner_customer.present?
    .row.strong
      .col-md-2 Serial No
      .col-md-2 Category
      .col-md-1 Model No
      .col-md-1 Product No
      .col-md-4 Description
      .col-md-2 Select
    %hr

    - product.owner_customer.products.each do |product|
      .row
        .col-md-2= product.serial_no
        .col-md-2= product.category_full_name("|")
        .col-md-1= product.model_no
        .col-md-1= product.product_no
        .col-md-4= product.description
        .col-md-2= link_to "Select", update_edit_serial_tickets_path({selected_product: true, product_id: product.id, process_id: Rails.cache.fetch([uri_path, params[:task_id]])[:process_id], task_id: Rails.cache.fetch([uri_path, params[:task_id]])[:task_id], owner: Rails.cache.fetch([uri_path, params[:task_id]])[:owner] }.merge(bpm_params_variables)), method: :post
      %hr

  - elsif product.tickets.any?{|t| t.id != ticket.id }
    #product_form_template
      = simple_nested_form_for @new_product, url: update_edit_serial_tickets_path, method: :post do |f|
        = hidden_field_tag :new_product, "true"
        = hidden_field_tag :process_id, Rails.cache.fetch([uri_path, params[:task_id]])[:process_id]
        = hidden_field_tag :task_id, Rails.cache.fetch([uri_path, params[:task_id]])[:task_id]
        = hidden_field_tag :owner, Rails.cache.fetch([uri_path, params[:task_id]])[:owner]
        - Rails.cache.fetch([uri_path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
          = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]
        .panel-body
          .row
            %h4 New Product
          .row
            .col-md-4
              = f.input :serial_no, required: true
            .col-md-4
              = f.association :sla_time, collection: SlaTime.where(active: true),required: true, label_method: :description, include_blank: false, label: "SLA"

          .row.product_cat
            .select_wrapper
              .col-md-3
                = f.association :product_brand, collection: ProductBrand.where(active: true), required: true, input_html: {class: "product_brand"}
              .col-md-3
                %font{:color => "#90032A"}
                  = label_tag "#{CompanyConfig.first.try(:sup_product_category1_label)} : "
                  = select_tag "search_product_category1_cus_product", option_groups_from_collection_for_select(ProductBrand.where(active: true), :active_product_category1s, :id, :id, :name, "#"), include_blank: true, class: "product_category1 form-control"
              .col-md-3
                %font{:color => "#90032A"}
                  = label_tag "#{CompanyConfig.first.try(:sup_product_category2_label)} : "
                  = select_tag "search_product_category2_cus_product", option_groups_from_collection_for_select(ProductCategory1.all, :active_product_category2s, :id, :id, :name, "#"), include_blank: true, class: "product_category2 form-control"
              .col-md-3
                = f.association :product_category, collection: ProductCategory2.all, as: :grouped_select, group_method: :active_product_categories, group_label_method: :id, value_method: :id, required: true, input_html: {class: "product_category", onchange: "Tickets.product_name(this);"}, label: "#{CompanyConfig.first.try(:sup_product_category_label)} : "
          .row
            .col-md-2
              = f.input :model_no
            .col-md-2
              = f.input :product_no
          .row.pro_name
            .col-md-4
              = f.input :name, input_html: {class: "product_name"}
            .col-md-8
              =f.input :description
          / .row
          /   .col-md-4
          /     / = f.association :location_address, collection: ([organization] + organization.members), as: :grouped_select, group_method: :addresses, label_method: :full_address, required: true
          /     = f.association :location_address, collection: [organization], as: :grouped_select, group_method: :addresses, label_method: :full_address, required: true
          / %fieldset
          /   %legend POP
          /   .row
          /     .col-md-3
          /       = f.association :product_pop_status, collection: ProductPopStatus.where(active: true)
          /     .col-md-4
          /       = f.input :pop_note
          /     .col-md-3
          /       = f.association :product_sold_country, label_method: :country_name_with_code
          /     .col-md-3
          /       %strong.small_scale_padding-bottom3{style: "display: block;"} POP note document
          /       = f.label "Upload pop note"
          /       / = f.file_field :pop_doc_url, accept: 'image/png,image/gif,image/jpeg,application/pdf', class: "product_pop_doc_url", data: {class: "pop_doc_url_wrapper"}
          /       = f.file_field :pop_doc_url, accept: 'image/png,image/gif,image/jpeg,application/pdf'
          /       / #preview_of_pop_doc_url{style: "word-wrap: break-word;"}


          /       / .pop_doc_url_wrapper


          / %fieldset
          /   %legend Corporate Info
          /   .row
          /     .col-md-4
          /       = f.input :corporate_product, wrapper: :append
          /     .col-md-4
          /       = f.input :dn_number
          /     .col-md-4
          /       = f.input :invoice_number
          /   .row
          /     .col-md-4
          /       = f.input :invoice_date, as: :string, input_html: {class: "datepicker", value: f.object.invoice_date.try(:strftime, INOCRM_CONFIG["short_date_format"])}
          /     .col-md-4
          /       = f.input :date_installation, as: :string, input_html: {class: "datepicker", value: f.object.date_installation.try(:strftime, INOCRM_CONFIG["short_date_format"])}
          /     / = hidden_field_tag :owner_customer_id, organization.id



          / %fieldset
          /   %legend Warranty
          /   = f.simple_fields_for :warranties do |w| # "products_attributes[]", w.object.warranties.build
          /     - if w.object.new_record?
          /       %fieldset
          /         %h3 New Warranty
          /         = w.input :product_serial_id, as: :hidden, input_html: {value: f.object.id}
          /         .row
          /           .col-md-6
          /             = w.association :warranty_type, as: :radio_buttons, wrapper: :append, collection: WarrantyType.where(active: true).first(2), checked: WarrantyType.find_by_code("MW").id
          /           .col-md-6
          /             .strong
          /               Warranty date format
          /             %select.selectpicker{:name => "selValue", class: "small_scale_margin-top1"}
          /               %option dd M, yyyy
          /               %option dd, yyyy, M
          /               %option M, yyyy, dd
          /               %option M, dd, yyyy
          /               %option yyyy, M, dd
          /               %option yyyy, dd, M
          /         .row
          /           .col-md-6
          /             = w.input :start_at, as: :string, input_html: {class: "datepicker"}
          /           .col-md-6
          /             = w.input :end_at, as: :string, input_html: {class: "datepicker"}
          /         .row
          /           .col-md-4
          /             = w.input :period_part, input_html: {min: "0", class: "only_float"}, label: "Parts Warannty Period (Months):"
          /           .col-md-4
          /             = w.input :period_labour, input_html: {min: "0", class: "only_float"}, label: "Labour Warannty Period (Months):"
          /           .col-md-4
          /             = w.input :period_onsight, label: "Corporate on-site", input_html: {min: "0", class: "only_float"}, label: "On-Site Warannty Period (Months):"
          /         .row
          /           .col-md-3
          /             = w.input :care_pack_product_no, label: "Care pack product number"
          /           .col-md-3
          /             = w.input :care_pack_reg_no, label: "Care pack reg number"
          /           .col-md-6
          /             = w.input :note, input_html: {rows: 1}
          /         .row
          /           .col-md-2.small_scale_padding-top3
          /             = w.link_to_remove  class: "remove_c_t_v_link",:data => { :confirm => 'Are you sure?', toggle: "tooltip", placement: "bottom" }, title: "Remove" do
          /               %button.btn.btn-danger Remove
          /   = f.link_to_add "Add Warrenty", :warranties, class: "btn btn-sm btn-warning", onclick: "var _this = this; setTimeout(function(){Tickets.date_picker_call(); return false;}, 200)"


          %br
          .row
            .col-md-8
              = f.input :note
          .row
            .col-md-12
              = f.submit "Save", class: "btn btn-success", data: {disable_with: "Please wait..."}


  - else
    / product may have another tickets binded
    = simple_nested_form_for product, url: update_edit_serial_tickets_path, method: :post do |f|
      = hidden_field_tag :process_id, Rails.cache.fetch([uri_path, params[:task_id]])[:process_id]
      = hidden_field_tag :task_id, Rails.cache.fetch([uri_path, params[:task_id]])[:task_id]
      = hidden_field_tag :owner, Rails.cache.fetch([uri_path, params[:task_id]])[:owner]
      - Rails.cache.fetch([uri_path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
        = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

      = hidden_field_tag :product_id, product.id

      %strong Serial No:
      = f.object.serial_no
      %br/

      .row
        .col-md-6
          = f.input :serial_no, label:"New Serial No"
        / .col-md-6
        /   = f.simple_fields_for :ticket_product_serials do |sr|
        /     - if sr.object.ticket_id == ticket.id
        /       / = f.input :ref_product_serial, label:"Ref product serial"
        /       = sr.association :ref_product_serial, value_method: :id, label_method: :serial_no, input_html: {class: "chosen-select"}


      .hide
        - if @complete_task or @edit_serial
          = label_tag "Task completed"
          = check_box_tag "complete_task", true, true # this is for extend_warranty purpose. this can be used anywhere as render

      = f.submit "Save", class: "btn btn-success", data: {disable_with: "Please wait..."}