- uri = URI(request.url)

- if @onloan_request
  - request_part = @onloan_spare_part
  .row
    .col-md-12
      %strong ON-LOAN Part Request
      %br/
      %strong SRN No:
      #{link_to request_part.srn.formatted_srn_no, srns_admins_inventories_path(srn_id: request_part.srn.id), target: "_blank"}
  - part_terminated = (request_part.status_action_id == SparePartStatusAction.find_by_code("CLS").id)
- else
  - request_part = spare_part.ticket_spare_part_store
  - part_terminated = (spare_part.status_action_id == SparePartStatusAction.find_by_code("CLS").id)


- srn_item = request_part.srn_item

- if spare_part and request_part.is_a? TicketSparePartStore
  .row
    .col-md-3
      %strong Part No:
      #{spare_part.spare_part_no}
      %br
      %strong SRN No:
      #{link_to srn_item.srn.formatted_srn_no, srns_admins_inventories_path(srn_id: srn_item.srn.id), target: "_blank"}
    .col-md-3
      %strong Part Description:
      #{spare_part.spare_part_description}
      %br
      %strong FSR No:
      - if spare_part.fsr_id
        = spare_part.ticket_fsr.ticket_fsr_no.to_s.rjust(6, INOCRM_CONFIG["fsr_no_format"])
    .col-md-3
      %strong Part Status:
      #{spare_part.spare_part_status_action.try(:name)}
      %br/
      %strong Requested by:
      #{User.cached_find_by_id(spare_part.requested_by).try(:full_name)}
    .col-md-3
      - if spare_part.cus_chargeable_part
        %strong.red Customer chargeable
      - else
        %strong Not customer chargeable
      %br/
      %strong Requested at:
      #{spare_part.requested_at.try(:strftime, INOCRM_CONFIG['short_date_format'])}

- if request_part.is_a? TicketSparePartStore
  - if request_part.ticket_spare_part.ticket_estimation_parts.present?
    - request_part.ticket_spare_part.ticket_estimation_parts.each do |tsp|
      .row
        .col-md-3
        .col-md-3
          %strong Estimated price (#{ticket.ticket_currency.code}): #{number_with_precision tsp.ticket_estimation.advance_payment_amount, precision: 2}

        .col-md-3
          %strong Estimated by: #{User.cached_find_by_id(tsp.ticket_estimation.estimated_by).try(:full_name)}

        .col-md-3
          %strong Estimated at: #{tsp.ticket_estimation.estimated_at.try(:strftime, INOCRM_CONFIG['short_date_format'])}

    %hr
  - if request_part.ticket_spare_part.ticket_estimation_parts.present?
    - request_part.ticket_spare_part.ticket_estimation_parts.each do |tsp|
      .row
        .col-md-3
        .col-md-3
          %strong Advance payment amount(#{ticket.ticket_currency.code}):
          = tsp.ticket_estimation.advance_payment_amount
        .col-md-3
          %strong Customer approved by:
          #{User.cached_find_by_id(tsp.ticket_estimation.cust_approved_by).try(:full_name)}

        .col-md-3
          %strong Customer approved at:
          #{tsp.ticket_estimation.cust_approved_at.try(:strftime, INOCRM_CONFIG['short_date_format'])}
    %hr
  - if request_part.store_requested
    .row
      .col-md-3
      .col-md-3
      .col-md-3
        %strong Store requested by:
        #{User.cached_find_by_id(request_part.store_requested_by).try(:full_name)}

      .col-md-3
        %strong Store requested at:
        #{request_part.store_requested_at.try(:strftime, INOCRM_CONFIG['short_date_format'])}

  - if request_part.ticket_spare_part.part_terminated    
    %hr
    .row
      .col-md-3
      .col-md-3
        %strong Part terminated:
        Terminated
      .col-md-6
        %strong Part terminated reason:
        = request_part.ticket_spare_part.part_terminated_reason.try(:reason)
  %hr

- if request_part.is_a? TicketOnLoanSparePart
  .row
    .col-md-3
    .col-md-3
      %strong Status:
      = request_part.spare_part_status_action.name
    .col-md-3
      %strong Requested by:
      #{User.cached_find_by_id(request_part.requested_by).try(:full_name)}

    .col-md-3
      %strong Requested at:
      #{request_part.requested_at.try(:strftime, INOCRM_CONFIG['short_date_format'])}

  %hr
  - if request_part.ticket_spare_part
    .row
      .col-md-3
      .col-md-3
        %strong Ref. spare part no:
        = request_part.ticket_spare_part.spare_part_no
      .col-md-6
        %strong Ref. Spare part description:
        = request_part.ticket_spare_part.spare_part_description

  - if request_part.part_terminated    
    %hr
    .row
      .col-md-3
      .col-md-3
        %strong Part terminated:
        Terminated
      .col-md-6
        %strong Part terminated reason:
        = request_part.part_terminated_reason.try(:reason)
  %hr

- if request_part and srn_item
  - session[:approved_inventory_product_id] = request_part.approved_inventory_product.id
  .row
    .col-md-6
      %h4 Approved part
      %dl.dl-horizontal
        %dt Store
        %dd
          = request_part.approved_store.try(:name)
        %dt Item Code
        %dd
          = request_part.approved_inventory_product.try(:generated_item_code)
        %dt Item Description
        %dd
          = request_part.approved_inventory_product.try(:description)
        %dt Model No
        %dd
          = request_part.approved_inventory_product.try(:model_no)
        %dt Product No
        %dd
          = request_part.approved_inventory_product.try(:product_no)
        %dt Part No
        %dd
          = request_part.approved_inventory_product.try(:spare_part_no)
        %dt Available Qnty
        %dd
          = request_part.approved_inventory_product.inventories.where(store_id: request_part.approved_store_id).sum :available_quantity

        %dt Required Qnty
        %dd= request_part.approved_quantity

    .col-md-6
      - if request_part.approved_main_inventory_product
        %h4 Part of main product
        %dl.dl-horizontal
          %dt Store
          %dd
            = request_part.approved_store.name
          %dt Item Code
          %dd
            = request_part.approved_main_inventory_product.generated_item_code
          %dt Item Description
          %dd
            = request_part.approved_main_inventory_product.description
          %dt Model No
          %dd
            = request_part.approved_main_inventory_product.model_no
          %dt Product No
          %dd
            = request_part.approved_main_inventory_product.product_no
          %dt Available Qnty
          %dd
            = request_part.approved_main_inventory_product.inventories.where(store_id: request_part.approved_store_id).sum(:available_quantity)

%fieldset
  %legend Issue store part (GIN) #{part_terminated ? '- Terminated' : '' }
  = simple_nested_form_for (@onloan_request ? (spare_part || ticket) : spare_part), url: update_issue_store_parts_tickets_path, method: :post, html: {id: "new_ticket_spare_part"} do |f| # update_issue_store_parts_inventories_path

    = hidden_field_tag :process_id, Rails.cache.fetch([uri.path, params[:task_id]])[:process_id]
    = hidden_field_tag :task_id, Rails.cache.fetch([uri.path, params[:task_id]])[:task_id]
    = hidden_field_tag :owner, Rails.cache.fetch([uri.path, params[:task_id]])[:owner]
    - Rails.cache.fetch([uri.path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
      = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

    = f.simple_fields_for (params[:onloan_request] == "Y" ? "ticket_on_loan_spare_parts_attributes[]" : "ticket_spare_part_store_attributes"), (params[:onloan_request] == "Y" ? @onloan_spare_part : spare_part.ticket_spare_part_store) do |sto|
      = sto.input :id, as: :hidden

      = sto.input :approved_store_id, as: :hidden, input_html: {id: "store_id"}
      = hidden_field_tag :mst_store_id, sto.object.store_id, id: "mst_store_id"
      = sto.input :approved_inv_product_id, as: :hidden, input_html: {id: "inv_product_id"}
      = sto.input :approved_main_inv_product_id, as: :hidden, input_html: {id: "mst_inv_product_id"}

      - unless part_terminated
        = tab_panel do
          = tab_nav_tab({id: "issue_part_main_product"}, {seperate_product_tab: {active_class: "active", content: "Seperate product"}, main_product_part_tab: {content: "Part of main product"}})
          .tab-content
            / For Seperate grn Serial Product / Grn Batch / Grn Item
            = tab_content tabpointer: :seperate_product_tab, active_class: "active" do
              - if sto.object.approved_inventory_product.inventory_product_info.need_serial
                / = paginate @paginated_fifo_grn_serial_items, remote: false, method: :get
                / For Seperate Grn Serial Product
                %h4 Serial Product
                .row.strong
                  .col-md-1 No
                  .col-md-1 GRN No
                  .col-md-1 GRN date
                  .col-md-1 GRN received qty
                  .col-md-1 GRN remaining qty
                  .col-md-1 Serial No
                  .col-md-1 Status
                  .col-md-1 Condition
                  / .col-md-1 Batch no
                  / .col-md-1 Lot No
                  / .col-md-1 Part not completed
                  / .col-md-1 Scavenge
                  / .col-md-1 Damage
                  / .col-md-1 Used
                  / .col-md-1 Repaired
                  / .col-md-1 Reserved
                  / .col-md-1 CT No
                  .col-md-1 Date of manufacture
                  .col-md-1 Date of expire
                  .col-md-1 Remarks
                  .col-md-1 Issue

                #paginateble_serial_items
                  - @paginated_fifo_grn_serial_items.each_with_index do |grn_serial_item, index|
                    .row
                      .col-md-1
                        - if params[:page]
                          = (index+1) + 500*(params[:page].to_i-1)
                        - else
                          = (index+1)

                      .col-md-1= grn_serial_item.grn_item.grn.grn_no_format
                      .col-md-1= grn_serial_item.grn_item.grn.created_at.to_date.try(:strftime, INOCRM_CONFIG['short_date_format'])
                      .col-md-1= grn_serial_item.grn_item.recieved_quantity
                      .col-md-1= grn_serial_item.grn_item.remaining_quantity
                      .col-md-1= grn_serial_item.inventory_serial_item.serial_no
                      .col-md-1= grn_serial_item.inventory_serial_item.status_name
                      .col-md-1= grn_serial_item.inventory_serial_item.product_condition_condition
                      / %td= grn_serial_item.inventory_serial_item.batch_no
                      / %td= grn_serial_item.inventory_serial_item.lot_no
                      / %td= grn_serial_item.inventory_serial_item.parts_not_completed ? "Not completed" : ""
                      / %td= grn_serial_item.inventory_serial_item.scavenge ? "Scavenge" : ""
                      / %td= grn_serial_item.inventory_serial_item.damage ? "Damaged" : ""
                      / %td= grn_serial_item.inventory_serial_item.used ? "Used" : ""
                      / %td= grn_serial_item.inventory_serial_item.repaired ? "Repaired" : ""
                      / %td= grn_serial_item.inventory_serial_item.reserved ? "Reserved" : ""
                      / %td= grn_serial_item.inventory_serial_item.ct_no
                      .col-md-1= grn_serial_item.inventory_serial_item.manufatured_date.try(:strftime, INOCRM_CONFIG['short_date_format'])
                      .col-md-1= grn_serial_item.inventory_serial_item.expiry_date.try(:strftime, INOCRM_CONFIG['short_date_format'])
                      .col-md-1= simple_format grn_serial_item.inventory_serial_item.remarks
                      .col-md-1= radio_button_tag "grn_serial_item_id", grn_serial_item.id, false,{class: "seperate_product_ckeckbox"} if srn_item.quantity == 1

                / = paginate @paginated_fifo_grn_serial_items, remote: false, method: :get
                / = link_to "Load more", prn_admins_inventories_path(srn: "search_srn", query: params[:query], page: (session[:page] || 2), load_more: true), remote: true
                #next_paginate_link_serial_items
                  = link_to_next_page @paginated_fifo_grn_serial_items, "Load More", remote: true, method: :get

              - elsif sto.object.approved_inventory_product.inventory_product_info.need_batch
                = paginate @grn_batches, remote: false, method: :get
                / For Seperate Grn Batch Product
                %h4 Batch Product
                = label_tag "Product condition"
                = select_tag "product_condition_id", options_from_collection_for_select(ProductCondition.where(active: true), "id", "condition")
                %table.table.table-hover.table-condensed
                  %thead
                    %tr
                      %th No
                      %th GRN No
                      %th GRN date 
                      %th GRN received qty
                      %th GRN remaining qty
                      %th Batch no
                      %th Lot No
                      %th Available quantity
                      %th Remarks
                      %th Issue
                  %tbody
                    - relative_grn_item_ids = sto.object.approved_inventory_product.grn_item_ids
                    - @grn_batches.select{|b| relative_grn_item_ids.include?(b.grn_item_id.to_i)}.each_with_index do |grn_batch, index|
                      %tr
                        %td
                          - if params[:page]
                            = (index+1)+ 10**(params[:page].to_i-1)
                          - else
                            = (index+1)
                        %td= grn_batch.grn_item.grn.grn_no
                        %td= grn_batch.grn_item.grn.created_at.try(:strftime, INOCRM_CONFIG['short_date_format'])
                        %td= grn_batch.grn_item.recieved_quantity
                        %td= grn_batch.grn_item.remaining_quantity
                        %td
                          = grn_batch.inventory_batch.batch_no
                        %td
                          = grn_batch.inventory_batch.lot_no
                        %td
                          = sto.object.approved_inventory_product.inventory_product_info.issue_fractional_allowed ? (grn_batch.grn_item.remaining_quantity.to_f - grn_batch.grn_item.reserved_quantity.to_f) : (grn_batch.grn_item.remaining_quantity.to_d - grn_batch.grn_item.reserved_quantity.to_d)
                        %td= simple_format grn_batch.grn_item.remarks
                        %td
                          = radio_button_tag "grn_batch_id", grn_batch.id, false if srn_item.quantity.to_f <= grn_batch.grn_item.remaining_quantity.to_f

                = paginate @grn_batches, remote: false, method: :get
              - else
                = paginate @grns, remote: false, method: :get
                / For Seperate Grn item Product
                %h4 Non Batch and Non Serial Product
                %table.table.table-hover.table-condensed
                  %thead
                    %tr
                      %th No 
                      %th Grn No
                      %th Grn date 
                      %th Grn received qty
                      %th Grn remaining qty
                      %th Available quantity
                      %th remarks
                      %th issue
                  %tbody
                    - @grns.each_with_index do |grn_item, index|
                      %tr
                        %td
                          - if params[:page]
                            = (index+1)+ 10**(params[:page].to_i-1)
                          - else
                            = (index+1)
                        %td= grn_item.grn.grn_no
                        %td= grn_item.grn.created_at.to_date.try(:strftime, INOCRM_CONFIG['short_date_format'])
                        %td= grn_item.recieved_quantity
                        %td= grn_item.remaining_quantity
                        %td
                          = sto.object.approved_inventory_product.inventory_product_info.issue_fractional_allowed ? (grn_item.remaining_quantity.to_f - grn_item.reserved_quantity.to_f) : (grn_item.remaining_quantity.to_d - grn_item.reserved_quantity.to_d)
                        %td
                          = simple_format grn_item.grn.remarks
                        %td
                          = radio_button_tag "grn_item_id", grn_item.id, false if srn_item.quantity.to_f <= grn_item.remaining_quantity.to_f


                = paginate @grns, remote: false, method: :get

                = label_tag "Product condition"
                = select_tag "product_condition_id", options_from_collection_for_select(ProductCondition.where(active: true), "id", "condition")
            / For Part Of Main Serial Product
            = tab_content tabpointer: :main_product_part_tab do
              .row
                .col-md-6.main_product_with_linker
                  = link_to "Change main product", inventory_in_modal_inventories_path(select_frame: "main_product", issue_part: true), id: "part_of_main_product_select", remote: true
                  .main_product
                    - if sto.object.approved_main_inventory_product
                      %dl.dl-horizontal
                        %dt Store
                        %dd
                          = sto.object.store.name
                        %dt Item Code
                        %dd
                          = sto.object.approved_main_inventory_product.try(:serial_no)
                        %dt Item Description
                        %dd
                          = sto.object.approved_main_inventory_product.try(:description)
                        %dt Model No
                        %dd
                          = sto.object.approved_main_inventory_product.try(:model_no)
                        %dt Product No
                        %dd
                          = sto.object.approved_main_inventory_product.try(:product_no)
                        %dt Available Qnty
                        %dd
                          = sto.object.approved_main_inventory_product.inventories.where(store_id: sto.object.approved_store_id).try :sum, :available_quantity
              %hr
              #main_part_serial
                %table.table.table-hover.table-condensed
                  %thead
                    %tr
                      %th No
                      %th Grn No
                      %th Grn date
                      %th Grn received qty
                      %th Grn remaining qty
                      %th Batch no
                      %th Lot No
                      %th Serial No
                      %th Status
                      %th Condition
                      %th Part not completed
                      %th Scavenge
                      %th Damage
                      %th Used
                      %th Repaired
                      %th Reserved
                      %th CT No
                      %th Date of manufacture
                      %th Date of expire
                      %th Remarks
                      %th Issue
                  %tbody
                    - @main_part_serial.each_with_index do |grn_serial_item, index|
                      %tr
                        %td
                          - if params[:page]
                            = (index+1)+ 10**(params[:page].to_i-1)
                          - else
                            = (index+1)
                        %td= grn_serial_item.grn_item.grn.grn_no
                        %td= grn_serial_item.grn_item.grn.created_at.try(:strftime, INOCRM_CONFIG['short_date_format'])
                        %td= grn_serial_item.grn_item.recieved_quantity
                        %td= grn_serial_item.grn_item.remaining_quantity
                        %td= grn_serial_item.inventory_serial_item.inventory_batch.try(:batch_no)
                        %td= grn_serial_item.inventory_serial_item.inventory_batch.try(:lot_no)
                        %td= grn_serial_item.inventory_serial_item.serial_no
                        %td= grn_serial_item.inventory_serial_item.inventory_serial_item_status.name
                        %td= grn_serial_item.inventory_serial_item.product_condition.try(:condition)
                        %td= grn_serial_item.inventory_serial_item.parts_not_completed ? "Not completed" : ""
                        %td= grn_serial_item.inventory_serial_item.scavenge ? "Scavenge" : ""
                        %td= grn_serial_item.inventory_serial_item.damage ? "Damaged" : ""
                        %td= grn_serial_item.inventory_serial_item.used ? "Used" : ""
                        %td= grn_serial_item.inventory_serial_item.repaired ? "Repaired" : ""
                        %td= grn_serial_item.inventory_serial_item.reserved ? "Reserved" : ""
                        %td= grn_serial_item.inventory_serial_item.ct_no
                        %td= grn_serial_item.inventory_serial_item.manufatured_date.try(:strftime, INOCRM_CONFIG['short_date_format'])
                        %td= grn_serial_item.inventory_serial_item.expiry_date
                        %td= simple_format grn_serial_item.inventory_serial_item.remarks
                        %td= link_to "select", "#", onclick: "Inventories.load_serial_and_part(this, #{grn_serial_item.inventory_serial_item.id}, 'serial_item', '#{request_part.approved_inv_product_id}'); return false;"

              #main_part_part

      .row
        .col-md-12
          = label_tag "SRN SO Number", "SRN SO Number"
          = text_field_tag :srn_so_number, nil, class: "form-control"
        .col-md-12
          - if spare_part
            = f.input :note, label: "Spare part Note", input_html: { value: nil}
            = simple_format f.object.note
          - elsif @onloan_request
            = sto.input :note, label: "On-loan spare part Note", input_html: { value: nil}
            = simple_format sto.object.note
        .col-md-12
          .col-md-2
            = f.submit "#{part_terminated ? 'Terminated' : 'Save'}", class: "btn btn-success btn-sm", id: "approve_store_part", data: {disable_with: "Please wait..."}
          .col-md-2
            = link_to "Send available email", send_available_email_tickets_path(onloan: "#{@onloan_request}", part_id: (@onloan_request ? request_part.id : spare_part.id )), remote: true, method: :post, class: "btn btn-link", data: {disable_with: "Please wait..."}


#inventory_modal.modal.fade{tabindex: -1, role: "dialog", "aria-labelledby" => "inventory_modal", "aria-hidden" => true}
  .modal-dialog.modal-lg
    .modal-content