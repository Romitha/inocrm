- engineer = ticket.ticket_engineers.find params["engineer_id"]

%fieldset
  %legend Action Taken
  #error_msg
  = simple_form_for ticket, url: update_action_taken_ticket_path(ticket), method: :post, html: {id: "action_taken_form"} do |f|
    = hidden_field_tag :process_id, Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:process_id]
    = hidden_field_tag :task_id, Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:task_id]
    = hidden_field_tag :owner, Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:owner]
    - Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
      = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]


    = f.simple_fields_for "user_ticket_actions_attributes[]", @user_ticket_action do |uf|
      = uf.input :action_id, as: :hidden, input_html: {value: TaskAction.find_by_action_no(13).id}
      = uf.input :action_by, as: :hidden, input_html: {value: current_user.id}
      = uf.input :re_open_index, as: :hidden, input_html: {value: ticket.re_open_count}
      = uf.input :action_engineer_id, as: :hidden, input_html: {value: Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:bpm_input_variables].detect{ |e| e.first == "engineer_id" }.second }

      = uf.simple_fields_for :ticket_action_taken do |rf|
        = rf.input :action, required: true, input_html: {id: "action_taken_text"}
    = f.input :remarks, input_html: {value: nil}
    = simple_format ticket.remarks
    = f.input :resolution_summary, input_html: {id: "resolution_summary_text"} if ticket.job_finished

    - ticket_workfows = ticket.ticket_workflow_processes.where process_id: params["process_id"]
    - ticket_engineers = ticket.ticket_engineers.where(workflow_process_id: ticket_workfows.first.try(:id))

    - close_approval_required = (ticket.ticket_fsrs.any?{|fsr| ticket_engineers.ids.include?(fsr.engineer_id) } or ticket.ticket_spare_parts.any?{|part| ticket_engineers.ids.include?(part.engineer_id) } or ticket.ticket_on_loan_spare_parts.any?{|onloanpart| ticket_engineers.ids.include?(onloanpart.engineer_id) })

    - if (engineer.status > 1) and close_approval_required
      = label_tag "Request to close the Job"
      = check_box_tag :job_close_approval_requested, checked: close_approval_required, disabled: !close_approval_required

    = f.submit "Save", class: "btn btn-success", id: "action_taken_submit"