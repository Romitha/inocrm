- present_of_start_ticket_action =  ticket.user_ticket_actions.find_by_action_id(TaskAction.find_by_action_no(5).id).present?
- TicketSparePart
- ticket_engineer = @ticket_engineer

- unless params[:from_where1]
  .row
    - if ticket_engineer
      .col-md-12
        %h2 Task: #{ticket_engineer.task_description}
    -if ticket.re_open_count > 0
      %h3 Current Re-Open No.: #{ticket_engineer.re_open_index}
    .col-md-3
      Ticket Type:
      %strong= ticket.ticket_type.name
    .col-md-3
      Warranty type:
      %strong= ticket.warranty_type.name
    .col-md-3
      Customer chargeable:
      -if ticket.cus_chargeable == true
        %strong Yes
      -else
        %strong No
    .col-md-3
      Repair type:
      %strong= ticket.ticket_repair_type.name

  .row
    .col-md-12
      .form-group
        %label Activity
        %select{:class => "activity_id", :id => "template_caller"}
          - ticket_workfows = ticket.ticket_workflow_processes.where process_id: params["process_id"]
          - ticket_engineers = ticket.ticket_engineers.where(workflow_process_id: ticket_workfows.first.try(:id))

          - close_approval_required = (ticket.ticket_fsrs.any?{|fsr| ticket_engineers.ids.include?(fsr.engineer_id) } or ticket.ticket_spare_parts.any?{|part| ticket_engineers.ids.include?(part.engineer_id) } or ticket.ticket_on_loan_spare_parts.any?{|onloanpart| ticket_engineers.ids.include?(onloanpart.engineer_id) })

          / - unless params[:from_where1]
          - job_finished = (ticket_engineer.status > 1 or ticket.job_finished)
          - unless present_of_start_ticket_action
            / redirect_url - done
            %option{:value => "start_action", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Start Action
          - unless job_finished
            %option{:value => "re_assign", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Re Assign
          - if present_of_start_ticket_action and not job_finished
            / redirect_url - done
            %option{:value => "change_ticket_cus_warranty", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Change Ticket Warranty Type or Customer Chargeable
          - if present_of_start_ticket_action and not job_finished
            %option{:value => "change_ticket_repair_type", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Change Ticket Repair Type
          - if present_of_start_ticket_action and not ticket.status_hold
            %option{:value => "hold", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Hold
          - if present_of_start_ticket_action and ticket.status_hold
            %option{:value => "un_hold", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Un Hold
          - if present_of_start_ticket_action and not job_finished
            / redirect_url
            %option{:value => "edit_serial_no_request", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Edit Serial No Request
          - if present_of_start_ticket_action and ticket.ticket_type.code == 'OS'  and not job_finished
            / redirect_url - done (No BPM Involved)
            %option{:value => "create_fsr", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Create FSR
          - if present_of_start_ticket_action and ticket.ticket_fsrs.find_by_approved(:false).present?
            / redirect_url - done (No BPM Involved)
            %option{:value => "edit_fsr", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Edit FSR
          - if present_of_start_ticket_action and not job_finished
            / redirect_url
            %option{:value => "terminate_job", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Terminate Job
          - if present_of_start_ticket_action
            / redirect_url - done
            %option{:value => "action_taken", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Action Taken
          - if present_of_start_ticket_action and not job_finished and  ticket.ticket_repair_type.code == "IN" and (ticket.ticket_type.code == 'OS' ? ticket.ticket_fsrs.any? : true)
            / redirect_url - done
            %option{:value => "request_spare_part", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Request Spare Part
          - if present_of_start_ticket_action and not job_finished and INOCRM_CONFIG['TicketSparePart']['control_visible_store_request_from_radio']
            / redirect_url - done
            %option{:value => "request_on_loan_spare_part", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Request On Loan Spare Part
          - if present_of_start_ticket_action
            %option{:value => "hp_case_id", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} HP Case Action
          - if present_of_start_ticket_action and not job_finished and (ticket.ticket_repair_type.code=="IN" or (ticket.ticket_repair_type.code=="EX" and ticket.ticket_deliver_units.any?{|d| (d.received)}))
            / redirect_url - done
            %option{:value => "resolved_job", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Resolve the Job
          - if present_of_start_ticket_action and job_finished and close_approval_required
            %option{:value => "request_close_approval", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Request close approval

          //- if present_of_start_ticket_action and ticket.ticket_repair_type.code == "EX" and not (ticket.ticket_deliver_units.any?{|d| !d.received} or job_finished) and ticket.ticket_estimations.any?{|ts| ((ts.status_id == EstimationStatus.find_by_code("EST").id) or (ts.status_id == EstimationStatus.find_by_code("CLS").id) or (ts.status_id == EstimationStatus.find_by_code("APP").id)) and ((ts.cust_approved) or ( !ts.cust_approval_required))}
          - if present_of_start_ticket_action and ticket.ticket_repair_type.code == "EX" and not (ticket.ticket_deliver_units.any?{|d| !d.received} or job_finished) 
            / redirect_url
            %option{:value => "deliver_unit", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Deliver Unit

          - if present_of_start_ticket_action and !ticket.ticket_estimations.any?{|ts| (ts.status_id == EstimationStatus.find_by_code("RQS").id) } and ticket.ticket_repair_type.code=="EX" and not job_finished
            / redirect_url - done
            %option{:value => "job_estimation_request", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Job Estimate Request (External)

          - if present_of_start_ticket_action and ticket.ticket_repair_type.code=="EX" and ticket.ticket_deliver_units.any?{|d| (d.collected and !d.received)} and not job_finished
            %option{:value => "recieve_unit", data: {task_id: params[:task_id], process_id: params[:process_id], engineer_id: params[:engineer_id]}} Receive Unit

- unless params[:from_where1]
  .form-group
    #resolution_templates
      =render "tickets/tickets_pack/resolution/start_action", ticket: ticket unless ticket.user_ticket_actions.find_by_action_id(TaskAction.find_by_action_no(5).id).present?