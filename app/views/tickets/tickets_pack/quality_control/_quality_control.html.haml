- uri = URI(request.url)

- ticket = @ticket
- ge_questions = @ge_questions

- pr_q_and_answers = []
- ge_q_and_answers = []

- if !ticket.q_and_answers.any?{|q_and_answer| q_and_answer.q_and_a.task_action.action_no == action_no}
  - ticket.problem_category.q_and_as.includes(:task_action).where(mst_spt_action: {action_no: action_no}).each do |q_and_a|
    - pr_q_and_answers << ticket.q_and_answers.build(problematic_question_id: q_and_a.id)

- elsif ticket.persisted?

  - pr_q_and_answers = ticket.q_and_answers.includes(:q_and_a).where(mst_spt_problematic_question: {action_id: action_no})

- elsif !ticket.persisted? and ticket.q_and_answers.present?

  - pr_q_and_answers = ticket.q_and_answers

- if !ticket.ge_q_and_answers.any?{|ge_q_and_answer| ge_q_and_answer.ge_q_and_a.task_action.action_no == action_no}

  - ge_questions.each do |ge_q_and_a|
    - ge_q_and_answers << ticket.ge_q_and_answers.build(general_question_id: ge_q_and_a.id)

- elsif ticket.persisted?

  - ge_q_and_answers = ticket.ge_q_and_answers.includes(:ge_q_and_a).where(mst_spt_general_question: {action_id: action_no})

- elsif !ticket.persisted? and ticket.ge_q_and_answers.present?

  - ge_q_and_answers = ticket.ge_q_and_answers

= simple_nested_form_for ticket, url: update_quality_control_invoices_path, html: {class: "validate_form"}, method: :post do |f| # update_quality_control_invoices_path
  = hidden_field_tag :process_id, Rails.cache.fetch([uri.path, params[:task_id]])[:process_id]
  = hidden_field_tag :task_id, Rails.cache.fetch([uri.path, params[:task_id]])[:task_id]
  = hidden_field_tag :owner, Rails.cache.fetch([uri.path, params[:task_id]])[:owner]
  - Rails.cache.fetch([uri.path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
    = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

  .row  
    = f.simple_fields_for "user_ticket_actions_attributes[]", user_ticket_action do |uf|
      = uf.input :action_id, as: :hidden, input_html: {value: TaskAction.find_by_action_no(67).id, id: "dynamic_action_id"}
      = uf.input :action_by, as: :hidden, input_html: {value: current_user.id}
      = uf.input :re_open_index, as: :hidden, input_html: {value: ticket.re_open_count.to_i}

      = uf.simple_fields_for :act_quality_control  do |aqc|
        .col-md-6.col-xs-6
          = aqc.label "Quality Control Passed"
          = aqc.check_box :approved, id: "act_quality_control_reject_reason", data: {approve_action_no: 57, reject_action_no: 67}
          %h4 Resolution history
          %ul
            - ticket.user_ticket_actions.where(action_id: 21).each do |action|
              %li= action.ticket_finish_job.resolution
          %strong Resolution Summary
          / = link_to "#", class: "inline_edit", data: {type: "textarea", resource: "ticket", name: "resolution_summary", url: update_attribute_ticket_path(f.object.id), "original-title" => "Update quality_control"} do
          = f.object.resolution_summary
        .reject_reason_sec_hide.col-md-6.col-xs-6
          = aqc.input :reject_reason, input_html: {id: "reject_reason"}, required: true
  .row
    .col-md-6.col-xs-6
    .col-md-6.col-xs-6
      = f.input :remarks, input_html: {value: nil}#, label: "Note"

  #approve
    %h4 General questions
    - ge_q_and_answers.each_with_index do |ge_q_and_answer, index|
      = f.simple_fields_for "ge_q_and_answers_attributes[#{index}]", ge_q_and_answer do |qa|
        = qa.input :id, as: :hidden
        = qa.input :general_question_id, as: :hidden
        = qa.input :ticket_action_id, as: :hidden, input_html: {value: action_no}
        .col-md-6
          .strong= qa.object.ge_q_and_a.question

          - if qa.object.ge_q_and_a.answer_type == "YN"
            = qa.input :answer, as: :radio_buttons, collection: ["Yes", "No"], include_blank: false, wrapper: :for_radio_button, required: qa.object.ge_q_and_a.compulsory, input_html: {name: "ticket[ge_q_and_answers_attributes][#{index}][answer]"}
          - elsif qa.object.ge_q_and_a.answer_type == "TX"
            = qa.input :answer, required: qa.object.ge_q_and_a.compulsory
    %hr
    %h4 Problematic questions
    - pr_q_and_answers.each_with_index do |pr_q_and_answer, index|
      = f.simple_fields_for "q_and_answers_attributes[#{index}]", pr_q_and_answer do |qa|
        = qa.input :id, as: :hidden
        = qa.input :problematic_question_id, as: :hidden
        = qa.input :ticket_action_id, as: :hidden, input_html: {value: action_no}
        .col-md-6
          .strong= qa.object.q_and_a.question
          - if qa.object.q_and_a.answer_type == "YN"
            = qa.input :answer, as: :radio_buttons, collection: ["Yes", "No"], include_blank: false, wrapper: :for_radio_button, required: qa.object.q_and_a.compulsory, input_html: {rows: 1, name: "ticket[q_and_answers_attributes][#{index}][answer]"}
          - elsif qa.object.q_and_a.answer_type == "TX"
            = qa.input :answer, required: qa.object.q_and_a.compulsory, input_html: {rows: 1}
  %br/
  .row
    .reject_reason_sec_hide
      .col-md-6
        = label_tag "Re-Open to Engineer"
        / = select_tag :start_engineer_id, options_from_collection_for_select(ticket.ticket_engineers.select { |t| t.re_open_index == 0 && t.re_assignment_requested == false && t.status > 0 }, "id", "user_id"), class: "form-control", include_blank: "Root"

        - ticket_engineer_by_channel = ticket.ticket_engineers.where(re_open_index: 0 ).group_by{|t| t.channel_no}.inject({}){|i, (k, v)| i.merge("channel_no:#{k}" => v.map { |e| [e.user.full_name, e.id] })}

        = select_tag :start_engineer_id, grouped_options_for_select(ticket_engineer_by_channel), class: "form-control", include_blank: "Root"

  %br/

  .row
    .col-md-2{style: "margin-bottom: 10px;"}
      = f.submit "Reject", class: "btn btn-success", id: "change_value_submit", name: "reject", data: {disable_with: "Please wait..."}
    .col-md-10.red
      %strong
        - unless ticket.send("contact_person#{ticket.inform_cp}").contact_person_contact_types.find_by_contact_type_id(ContactType.find_by_email(true).id).try(:value).present?
          *** Customer's email contact is not available ***
