- uri = URI(request.url)
- total_estimated = total_additional_cost = total_additional_estimated = 0
.row
  .col-md-12
    %h4 Selected Estimation

- estimation.ticket_estimation_externals.each do |estimation_external|

  .row
    .col-md-4
      Status : #{estimation.estimation_status.name}
    - if estimation.cust_approved
      .col-md-4
        Customer Approval : Approved
    - elsif estimation.cust_approved.nil?
      .col-md-4
        Customer Approval :
    - else
      .col-md-4
        Customer Approval : Rejected
    .col-md-4
      Warranty period (In Months): #{estimation_external.warranty_period}
  .row
    .col-md-4
      Repaired By (Organization): #{estimation_external.organization.name}
    .col-md-4
      Cost Price (#{estimation.ticket.ticket_currency.code}): #{number_with_precision estimation_external.cost_price, precision: 2}
    .col-md-4
      Estimated Price (#{estimation.ticket.ticket_currency.code}): #{number_with_precision (estimation.approval_required ? estimation_external.approved_estimated_price : estimation_external.estimated_price), precision: 2}

      - total_estimated += (estimation.approval_required ? estimation_external.approved_estimated_price : estimation_external.estimated_price).to_i

  %hr


- estimation.ticket_estimation_additionals.each do |ticket_estimation_additional|
  .row
    .col-md-4
      Additional Charges: #{ticket_estimation_additional.additional_charge.try(:additional_charge)}

    .col-md-4
      Cost Price (#{estimation.ticket.ticket_currency.code}): #{number_with_precision ticket_estimation_additional.cost_price, precision: 2}
      - total_additional_cost += (ticket_estimation_additional.cost_price)

    .col-md-4
      Estimated Price (#{estimation.ticket.ticket_currency.code}): #{number_with_precision (estimation.approval_required ? ticket_estimation_additional.approved_estimated_price : ticket_estimation_additional.estimated_price), precision: 2}
      - total_additional_estimated += (estimation.approval_required ? ticket_estimation_additional.approved_estimated_price : ticket_estimation_additional.estimated_price).to_i

.row{style: "margin-top:10px;"}
  .col-md-4.col-md-offset-4
    %strong Total Additional Cost  (#{estimation.ticket.ticket_currency.code}): #{number_with_precision total_additional_cost, precision: 2}
  .col-md-4
    %strong Total Additional Estimated Price (#{estimation.ticket.ticket_currency.code}): #{number_with_precision total_additional_estimated, precision: 2}

%hr

.row
  .col-md-12
    %strong Total Estimated Price (#{estimation.ticket.ticket_currency.code}) : #{number_with_precision (total_estimated + total_additional_estimated), precision: 2}
.row
  .col-md-4
    Min. Advance Payment (#{estimation.ticket.ticket_currency.code}): #{number_with_precision (estimation.approval_required ? estimation.approved_adv_pmnt_amount : estimation.advance_payment_amount), precision: 2}
  .col-md-6
    Advance Payment Recieved (#{estimation.ticket.ticket_currency.code}): #{number_with_precision estimation.ticket_payment_received.try(:amount).to_i, precision: 2}

.row
  .col-md-6
    - unless (estimation.estimation_status.code == "EST") and estimation.cust_approval_required and estimation.cust_approved.nil?
      %hr
      Estimation note:
      = simple_format estimation.note

%hr

- if (estimation.estimation_status.code == "EST") and estimation.cust_approval_required and estimation.cust_approved.nil?
  %fieldset
    %legend Estimation customer approval
    = simple_form_for estimation, url: update_estimation_external_customer_approval_inventories_path do |f|

      = hidden_field_tag :process_id, Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:process_id]
      = hidden_field_tag :task_id, Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:task_id]
      = hidden_field_tag :owner, Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:owner]
      - Rails.cache.fetch(["/tickets/resolution", params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
        = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

      = f.input :id, as: :hidden
      / = f.input :cust_approved_at, as: :hidden, input_html: {value: DateTime.now}
      = f.input :cust_approved_by, as: :hidden, input_html: {value: current_user.id}

      = f.input :cust_approved, as: :radio_buttons, collection: {approved: true, rejected: false}, wrapper: :append, label: false
      = f.input :note
      = f.submit "Save", class: "btn btn-success btn-sm"