%strong All Estimations
%table.table.table-responsive.table-condensed.table-bordered
  %thead
    %tr
      %th
      %th
      %th
      %th{colspan: 4, class: "text-center"} Estimated amount (#{ticket.ticket_currency.code})
      %th{colspan: 4, class: "text-center"}
    %tr
      %th No
      %th Requested date
      %th Description
      %th #{ticket.ticket_repair_type.code == 'EX' ? 'Repaired by' : 'Quantity' }
      %th #{ticket.ticket_repair_type.code == 'EX' ? 'Repair' : 'Parts' }
      %th Additional
      %th Tax
      %th Total
      %th Min. advanced payment
      %th Estimation status

  %tbody

    - if params[:process_id].present?
      - ticket_workfows = ticket.ticket_workflow_processes.where process_id: params[:process_id]
      - ticket_engineers = ticket.ticket_engineers.where(workflow_process_id: ticket_workfows.first.try(:id))
    - else
      - ticket_engineers = ticket.ticket_engineers

    - ticket.ticket_estimations.each_with_index do |estimation, index|

      - est_engineers = ticket_engineers.where(id: estimation.engineer_id)

      - if est_engineers.any? or params[:partial_template_for_show] == "estimation"

        - estimation_external_present = estimation.ticket_estimation_externals.present?
        - estimation_external_or_part = (estimation.ticket_estimation_externals.first or estimation.ticket_estimation_parts.first)
        - ticket_spare_part = estimation_external_or_part.ticket_spare_part unless estimation_external_present
        %tr
          %td
            = link_to index+1, load_estimation_inventories_path(estimation_id: estimation.id, estimation_type: "#{estimation_external_present ? 'external' : 'part' }", task_id: params[:task_id], template_action: params[:action], from_where1: params[:from_where1]), remote: true

          %td= estimation.requested_at.getlocal.try(:strftime, "%b %d, %Y %H:%M")
          %td
            .has-popover{title: "Description", data: {"toggle" => "popover", "title" => "Popover title", "trigger" => "hover", "content" => (estimation_external_present ? estimation_external_or_part.description : ticket_spare_part.spare_part_description)}}= truncate (estimation_external_present ? estimation_external_or_part.description : ticket_spare_part.spare_part_description), length: 20
          %td
            - if estimation_external_present
              = estimation_external_or_part.try(:organization).try(:name)

            - else
              = ticket_spare_part.ticket_spare_part_manufacture.try(:requested_quantity)

              - if ticket_spare_part.ticket_spare_part_store.present?
                - if ticket_spare_part.request_approved
                  = ticket_spare_part.ticket_spare_part_store.approved_quantity
                - else
                  = ticket_spare_part.ticket_spare_part_store.requested_quantity

              - if ticket_spare_part.ticket_spare_part_non_stock.present?
                - if ticket_spare_part.ticket_spare_part_non_stock.approval_required and ticket_spare_part.ticket_spare_part_non_stock.approved
                  = ticket_spare_part.ticket_spare_part_non_stock.approved_quantity
                - else
                  = ticket_spare_part.ticket_spare_part_non_stock.requested_quantity

          %td
            - if estimation.approval_required
              - if estimation_external_present
                = number_with_precision estimation.ticket_estimation_externals.sum(:approved_estimated_price), precision: 2
                = estimation.currency.try(:code)
              - else
                = number_with_precision estimation.ticket_estimation_parts.sum(:approved_estimated_price), precision: 2
            - else
              - if estimation_external_present
                = number_with_precision estimation.ticket_estimation_externals.sum(:estimated_price), precision: 2
              - else
                = number_with_precision estimation.ticket_estimation_parts.sum(:estimated_price), precision: 2

          %td
            = number_with_precision estimation.ticket_estimation_additionals.send(:sum, (estimation.approval_required ? :approved_estimated_price : :estimated_price )), precision: 2

          %td
            - total_tax = if estimation.approval_required
              - estimation.ticket_estimation_externals.to_a.sum{|e| e.ticket_estimation_external_taxes.sum(:approved_tax_amount) } + estimation.ticket_estimation_parts.to_a.sum{|e| e.ticket_estimation_part_taxes.sum(:approved_tax_amount) } + estimation.ticket_estimation_additionals.to_a.sum{|e| e.ticket_estimation_additional_taxes.sum(:approved_tax_amount) }

            - else
              - estimation.ticket_estimation_externals.to_a.sum{|e| e.ticket_estimation_external_taxes.sum(:estimated_tax_amount) } + estimation.ticket_estimation_parts.to_a.sum{|e| e.ticket_estimation_part_taxes.sum(:estimated_tax_amount) } + estimation.ticket_estimation_additionals.to_a.sum{|e| e.ticket_estimation_additional_taxes.sum(:estimated_tax_amount) }

            = number_with_precision(total_tax, precision: 2)

          %td
            - total_est = if estimation.approval_required
              - estimation.ticket_estimation_externals.sum(:approved_estimated_price) + estimation.ticket_estimation_parts.sum(:approved_estimated_price) + estimation.ticket_estimation_additionals.sum(:approved_estimated_price)

            - else
              - estimation.ticket_estimation_externals.sum(:estimated_price) + estimation.ticket_estimation_parts.sum(:estimated_price) + estimation.ticket_estimation_additionals.sum(:estimated_price)

            = number_with_precision(total_est + total_tax, precision: 2)

          %td
            = number_with_precision (estimation.approval_required ? estimation.approved_adv_pmnt_amount : estimation.advance_payment_amount), precision: 2
            / - cus_approved = if estimation.approval_required
            /   - if estimation.cust_approved
            /     - " (Approved) 1"
            /   - else
            /     - " (Not Approved) 2"
            / - else
            /   - " (App. Not Req) 3"

            - cus_approved = if !estimation.approval_required
              - " (App. Not Req)"
            - elsif estimation.cust_approved
              - " (Approved)"
            - else
              - "(Not Approved)"

            - cus_approved = if estimation.estimation_status.code != "CLS"
              - ""


          %td= [estimation.estimation_status.name, cus_approved].join(" ")


- if params[:partial_template_for_show] == 'estimation'
  = render "invoices/ticket_quotations", ticket: ticket

%div{id: "estimation_ajax_frame_#{params[:action]}"}

/ =params[:from_where]
- if params[:action] == "ajax_show"
  .col-md-3.pull-right= link_to "Estimation and Quotation", resolution_tickets_path(ticket_id: ticket.id, from_where1: params[:from_where1]), remote: false