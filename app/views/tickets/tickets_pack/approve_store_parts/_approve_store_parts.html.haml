- uri = URI(request.url)

- if @onloan_request
  - request_part = @onloan_spare_part
  .row
    .col-md-12
      %strong ON-LOAN Part Request
- else
  - request_part = spare_part.ticket_spare_part_store

- if spare_part and request_part.is_a? TicketSparePartStore
  .row
    .col-md-3
      %strong Part No:
      #{spare_part.spare_part_no}
    .col-md-3
      %strong Part Description:
      #{spare_part.spare_part_description}
      %br
      %strong FSR No:
      - if spare_part.fsr_id
        = spare_part.ticket_fsr.ticket_fsr_no.to_s.rjust(6, INOCRM_CONFIG["fsr_no_format"])
    .col-md-3
      %strong Part Status:
      #{spare_part.spare_part_status_action.try(:name)}
      %br/
      %strong Requested by:
      #{User.cached_find_by_id(spare_part.requested_by).try(:full_name)}
    .col-md-3
      - if spare_part.cus_chargeable_part
        %strong Customer chargeable
      - else
        %strong Not customer chargeable
      %br/
      %strong Requested at:
      #{spare_part.requested_at.try(:strftime, "%Y-%m-%d %H:%M")}
  %hr

- if request_part.is_a? TicketSparePartStore
  - if request_part.ticket_spare_part.ticket_estimation_parts.present?
    - request_part.ticket_spare_part.ticket_estimation_parts.each do |tsp|
      .row
        .col-md-4
          %strong Estimated price (#{tsp.ticket_estimation.currency.code}): #{number_with_precision tsp.estimated_price, precision: 2}

        .col-md-4
          %strong Estimated by: #{User.cached_find_by_id(tsp.ticket_estimation.estimated_by).try(:full_name)}

        .col-md-4
          %strong Estimated at: #{tsp.ticket_estimation.estimated_at.try(:strftime, "%Y-%m-%d %H:%M")}

      %hr
      .row
        .col-md-4
          %strong Advance payment amount:
          = tsp.ticket_estimation.advance_payment_amount
        .col-md-4
          %strong Customer approved by:
          #{User.cached_find_by_id(tsp.ticket_estimation.cust_approved_by).try(:full_name)}

        .col-md-4
          %strong Customer approved at:
          #{tsp.ticket_estimation.cust_approved_at.try(:strftime, "%Y-%m-%d %H:%M")}
      %hr

  - if request_part.store_requested
    .row
      .col-md-6
        %strong Store requested by:
        #{User.cached_find_by_id(request_part.store_requested_by).try(:full_name)}

      .col-md-6
        %strong Store requested at:
        #{request_part.store_requested_at.try(:strftime, "%Y-%m-%d %H:%M")}
    %hr

  - if request_part.ticket_spare_part.part_terminated
    .row
      .col-md-6
        %strong Part terminated:
        Terminated
      .col-md-6
        %strong Part terminated reason:
        = request_part.ticket_spare_part.part_terminated_reason.try(:reason)
    %hr

- if request_part.is_a? TicketOnLoanSparePart
  .row
    .col-md-4
      %strong Status:
      = request_part.spare_part_status_action.name
    .col-md-4
      %strong Requested by:
      #{User.cached_find_by_id(request_part.requested_by).try(:full_name)}

    .col-md-4
      %strong Requested at:
      #{request_part.requested_at.try(:strftime, "%Y-%m-%d %H:%M")}

  %hr
  - if request_part.ticket_spare_part
    .row
      .col-md-6
        %strong Ref. spare part no:
        = request_part.ticket_spare_part.spare_part_no
      .col-md-6
        %strong Ref. Spare part description:
        = request_part.ticket_spare_part.spare_part_description

    %hr

  - if request_part.part_terminated
    .row
      .col-md-6
        %strong Part terminated:
        Terminated
      .col-md-6
        %strong Part terminated reason:
        = request_part.ticket_spare_part.part_terminated_reason.try(:reason)
    %hr

- if request_part
  .row
    .col-md-6
      %h4 Requested spare part
      %dl.dl-horizontal
        %dt Store
        %dd
          = request_part.store.try(:name)
        %dt Item Code
        %dd
          = request_part.inventory_product.try(:serial_no)
        %dt Item Description
        %dd
          = request_part.inventory_product.try(:description)
        %dt Model No
        %dd
          = request_part.inventory_product.try(:model_no)
        %dt Product No
        %dd
          = request_part.inventory_product.try(:product_no)
        %dt Part No
        %dd
          = request_part.inventory_product.try(:spare_part_no)
        %dt Available Qnty
        %dd
          = request_part.inventory_product.inventories.where(store_id: request_part.store_id).try(:sum, :available_quantity)
        %dt Requested Qnty
        %dd= request_part.requested_quantity

    .col-md-6
      - if request_part.main_inventory_product
        %h4 Part of main product
        %dl.dl-horizontal
          %dt Store
          %dd
            = request_part.store.name
          %dt Item Code
          %dd
            = request_part.main_inventory_product.serial_no
          %dt Item Description
          %dd
            = request_part.main_inventory_product.description
          %dt Model No
          %dd
            = request_part.main_inventory_product.model_no
          %dt Product No
          %dd
            = request_part.main_inventory_product.product_no
          %dt Available Qnty
          %dd
            = request_part.main_inventory_product.inventories.where(store_id: request_part.store_id).try(:sum, :available_quantity)

%fieldset
  %legend Approve store part
  = simple_nested_form_for (@onloan_request ? (spare_part || ticket) : spare_part), url: update_approve_store_parts_tickets_path, method: :post, html: {id: "new_ticket_spare_part"} do |f|
    = hidden_field_tag :process_id, Rails.cache.fetch([uri.path, params[:task_id]])[:process_id]
    = hidden_field_tag :task_id, Rails.cache.fetch([uri.path, params[:task_id]])[:task_id]
    = hidden_field_tag :owner, Rails.cache.fetch([uri.path, params[:task_id]])[:owner]
    - Rails.cache.fetch([uri.path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
      = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

    = f.simple_fields_for (params[:onloan_request] == "Y" ? "ticket_on_loan_spare_parts_attributes[]" : "ticket_spare_part_store_attributes"), (params[:onloan_request] == "Y" ? @onloan_spare_part : spare_part.ticket_spare_part_store) do |sto|
      = sto.input :id, as: :hidden

      = sto.input :approved_store_id, as: :hidden, input_html: {id: "store_id", value: sto.object.store_id}
      = hidden_field_tag :mst_store_id, sto.object.store_id, id: "mst_store_id"
      = sto.input :approved_inv_product_id, as: :hidden, input_html: {id: "inv_product_id", value: sto.object.inv_product_id}
      = sto.input :approved_main_inv_product_id, as: :hidden, input_html: {id: "mst_inv_product_id", value: (params[:onloan_request] == "Y" ? sto.object.main_inv_product_id : sto.object.mst_inv_product_id)}
      = sto.input :ticket_id, as: :hidden, input_html: {value: ticket.id} if @onloan_request and spare_part.present?

      .row
        - if @onloan_request
          .col-md-6
            = sto.radio_button :approved, true, checked: true, class: "request_approved"
            = label_tag "Approve"
            = sto.radio_button :approved, false, checked: false, class: "request_approved"
            = label_tag "Reject"

        - else
          .col-md-6
            = sto.radio_button :store_request_approved, true, checked: true, class: "request_approved", disabled: (@onloan_request ? sto.object.part_terminated : sto.object.ticket_spare_part.part_terminated)
            = label_tag "Approve"
            = sto.radio_button :store_request_approved, false, checked: (@onloan_request ? sto.object.part_terminated : sto.object.ticket_spare_part.part_terminated), class: "request_approved"
            = label_tag "Reject"
        .col-md-6.request_from_radio_buttons          
          = label_tag "Part of a Main Product" do
            = radio_button_tag "approve_part_of_main_product", true, request_part.main_inventory_product.present?, class: "approve_part_of_main_product", id: "approve_part_of_main_product_true"
            Part of a Main Product
          = label_tag "Seperate Product" do
            = radio_button_tag "approve_part_of_main_product", false, !request_part.main_inventory_product.present?, class: "approve_part_of_main_product", id: "approve_part_of_main_product_false"
            Seperate Product
      .row
        .col-md-6.request_from_with_link
          = link_to "Change", inventory_in_modal_inventories_path(select_frame: "request_from"), id: "request_from_select", remote: true
          .request_from
            - if sto.object.inventory_product
              %dl.dl-horizontal
                %dt Store
                %dd
                  = sto.object.store.name
                %dt Item Code
                %dd
                  = sto.object.inventory_product.serial_no
                %dt Item Description
                %dd
                  = sto.object.inventory_product.description
                %dt Model No
                %dd
                  = sto.object.inventory_product.model_no
                %dt Product No
                %dd
                  = sto.object.inventory_product.product_no
                %dt Part No
                %dd
                  = sto.object.inventory_product.spare_part_no
                %dt Available Qnty
                %dd
                  = sto.object.inventory_product.inventories.where(store_id: sto.object.store_id).try(:sum, :available_quantity)

                = label_tag "Required Quantity"
                = text_field_tag "requested_quantity", (request_part.present? ? request_part.requested_quantity : 1 ), class: "form-control", readonly: (sto.object.inventory_product.inventory_product_info.need_serial)

        .col-md-6.main_product_with_link
          = link_to "Change", inventory_in_modal_inventories_path(select_frame: "main_product"), id: "part_of_main_product_select", remote: true
          .main_product
          - if sto.object.main_inventory_product
            %dl.dl-horizontal
              %dt Store
              %dd
                = sto.object.store.name
              %dt Item Code
              %dd
                = sto.object.main_inventory_product.try(:serial_no)
              %dt Item Description
              %dd
                = sto.object.main_inventory_product.try(:description)
              %dt Model No
              %dd
                = sto.object.main_inventory_product.try(:model_no)
              %dt Product No
              %dd
                = sto.object.main_inventory_product.try(:product_no)
              %dt Available Qnty
              %dd
                = sto.object.main_inventory_product.try(:inventories).try :sum, :available_quantity
    .row
      .col-md-12
        - if spare_part
          = f.input :note, input_html: { value: nil}
          = simple_format f.object.note
        - else
          = f.input :remarks, input_html: { value: nil}
          = simple_format f.object.remarks

        = f.submit "Save", class: "btn btn-success btn-sm", id: "approve_store_part"

#inventory_modal.modal.fade{tabindex: -1, role: "dialog", "aria-labelledby" => "inventory_modal", "aria-hidden" => true}
  .modal-dialog.modal-lg
    .modal-content