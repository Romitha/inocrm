- uri = URI(request.url)
- Inventory
- TicketEstimation

= collapse_wrapper collapse_id: "ticket_spare_part_id" do
  - ticket.cached_ticket_spare_parts.each do |ticket_spare_part|

    - manufacture_warranty = (ticket_spare_part.ticket_spare_part_manufacture and not ticket_spare_part.cus_chargeable_part)
    - manufacture_chargeable = (ticket_spare_part.ticket_spare_part_manufacture and ticket_spare_part.cus_chargeable_part)
    - store_warranty = (ticket_spare_part.ticket_spare_part_store and not ticket_spare_part.cus_chargeable_part)
    - store_chargeable = (ticket_spare_part.ticket_spare_part_store and ticket_spare_part.cus_chargeable_part)
    - non_stock_warranty = (ticket_spare_part.ticket_spare_part_non_stock and not ticket_spare_part.cus_chargeable_part)
    - non_stock_chargeable = (ticket_spare_part.ticket_spare_part_non_stock and ticket_spare_part.cus_chargeable_part)

    - rce = ticket_spare_part.spare_part_status_action.code == "RCE" #Received by Engineer
    - rpr = ticket_spare_part.spare_part_status_action.code == "RPR" #Returned Part Reject
    - rqt = ticket_spare_part.spare_part_status_action.code == "RQT" #Requested
    - str = ticket_spare_part.spare_part_status_action.code == "STR" #Request from Store
    - ecm = ticket_spare_part.spare_part_status_action.code == "ECM" #Estimation Completed
    - cea = ticket_spare_part.spare_part_status_action.code == "CEA" #Cus. Estimation Approved
    - iss = ticket_spare_part.spare_part_status_action.code == "ISS" #Issued

    - ord = ticket_spare_part.spare_part_status_action.code == "ORD" #Ordered from Manufacturer
    - clt = ticket_spare_part.spare_part_status_action.code == "CLT" #Collected from Manufacturer
    - rcs = ticket_spare_part.spare_part_status_action.code == "RCS" #Received from Manufacturer
    - rtn = ticket_spare_part.spare_part_status_action.code == "RTN" #Part Return by Engineer
    - rpa = ticket_spare_part.spare_part_status_action.code == "RPA" #Returned Part Accepted
    - bnd = ticket_spare_part.spare_part_status_action.code == "BND" #Part Bundled
    - cls = ticket_spare_part.spare_part_status_action.code == "CLS" #Close
    - aps = ticket_spare_part.spare_part_status_action.code == "APS" #Approved Store Request
    - rjs = ticket_spare_part.spare_part_status_action.code == "RJS" #Reject Store Request
    - rbn = ticket_spare_part.spare_part_status_action.code == "RBN" #Ready to Bundle
    - mpr = ticket_spare_part.spare_part_status_action.code == "MPR" #Manufacture Part Requested

    = collapse collapse_type: "info", header_content: "Ticket spare part (#{ticket_spare_part.ticket_spare_part_store ? 'Store' : (ticket_spare_part.ticket_spare_part_manufacture ? 'Manufacture' : 'Non Stock')}): #{ticket_spare_part.spare_part_no} - #{ticket_spare_part.spare_part_description}", collapse_link: "ticket_spare_part_link_#{ticket_spare_part.id}", collapse_id: "ticket_spare_part_id", labelledby: "ticket_spare_part_lby_#{ticket_spare_part.id}" do

      .alert.alert-warning
        .row
          .col-md-3
            %strong
              Spare Part No:
            = ticket_spare_part.spare_part_no
          .col-md-3
            %strong
              Description:
            = ticket_spare_part.spare_part_description

          .col-md-3
            %strong
              Requested:

            - if ticket_spare_part.requested_at
              #{ticket_spare_part.requested_at.try(:strftime, "%Y-%m-%d %H:%M")} by #{User.cached_find_by_id(ticket_spare_part.requested_by).try(:email)}                

          .col-md-3
            %strong
              Action Status:
            = ticket_spare_part.spare_part_status_action.name
            = link_to "history", "#", tabindex: "0", rel: "popover", title: "Action History", data: {toggle: "popover", trigger: "click", content: ticket_spare_part.ticket_spare_part_status_actions.map { |tsp| "#{tsp.spare_part_status_action.name} <span class='text-muted text3'>#{User.cached_find_by_id(tsp.done_by).email}-#{tsp.done_at.strftime('%Y-%m-%d %H:%M %P')}</span>" }.join("<br/>"), placement: "bottom", html: true}
            %br/
            %strong Pending:
            - if manufacture_warranty
              - if ticket_spare_part.spare_part_status_action.code == "RPR"
                - next_index = ticket_spare_part.spare_part_status_action.manufacture_type_index - 1
              - else
                - next_index = ticket_spare_part.spare_part_status_action.manufacture_type_index + 1

              = SparePartStatusAction.find_by_manufacture_type_index(next_index).try(:name_next) unless (next_index > 11) or (ticket_spare_part.spare_part_status_action.manufacture_type_index == 0)

            - elsif manufacture_chargeable
              - if ticket_spare_part.spare_part_status_action.code == "RPR"
                - next_index = ticket_spare_part.spare_part_status_action.manufacture_ch_type_index - 1
              - else
                - next_index = ticket_spare_part.spare_part_status_action.manufacture_ch_type_index + 1

              = SparePartStatusAction.find_by_manufacture_ch_type_index(next_index).try(:name_next) unless (next_index > 14) or (ticket_spare_part.spare_part_status_action.manufacture_ch_type_index == 0)

            - elsif store_warranty
              - if ticket_spare_part.spare_part_status_action.code == "RPR"
                - next_index = ticket_spare_part.spare_part_status_action.store_nc_type_index - 1
              - else
                - next_index = ticket_spare_part.spare_part_status_action.store_nc_type_index + 1

              = SparePartStatusAction.find_by_store_nc_type_index(next_index).try(:name_next) unless (next_index > 7) or (ticket_spare_part.spare_part_status_action.store_nc_type_index == 0) or (ticket_spare_part.spare_part_status_action.code == "RJS")
            - elsif store_chargeable
              = SparePartStatusAction.find_by_store_ch_type_index(ticket_spare_part.spare_part_status_action.store_ch_type_index+1).try(:name_next) unless (ticket_spare_part.spare_part_status_action.store_ch_type_index+1 > 8) or (ticket_spare_part.spare_part_status_action.store_ch_type_index == 0) or (ticket_spare_part.spare_part_status_action.code == "RJS")

            - elsif non_stock_warranty
              - next_index = ticket_spare_part.spare_part_status_action.non_stock_nc_type_index.to_i + 1

              = SparePartStatusAction.find_by_non_stock_nc_type_index(next_index).try(:name_next) unless (next_index > 2) or (ticket_spare_part.spare_part_status_action.non_stock_nc_type_index == 0)

            - elsif non_stock_chargeable
              - next_index = ticket_spare_part.spare_part_status_action.non_stock_ch_type_index + 1

              = SparePartStatusAction.find_by_non_stock_ch_type_index(next_index).try(:name_next) unless (next_index > 4) or (ticket_spare_part.spare_part_status_action.non_stock_ch_type_index == 0)

          %hr

          .col-md-3
            %strong
              FSR No:
            = ticket_spare_part.ticket_fsr and ticket_spare_part.ticket_fsr.ticket_fsr_no.to_s.rjust(6, INOCRM_CONFIG["fsr_no_format"])
          .col-md-3
            %strong
              Faulty Serial No:
            %span#ticket_spare_part_faulty_serial_no.faulty_serial_no= ticket_spare_part.faulty_serial_no
          .col-md-3
            %strong
              Faulty CT No:
            %span#ticket_spare_part_faulty_ct_no.faulty_ct_no= ticket_spare_part.faulty_ct_no
          .col-md-3
            %strong
              Request type:
            - if ticket_spare_part.ticket_spare_part_store 
              = "Store - "
            - elsif ticket_spare_part.ticket_spare_part_manufacture
              = "Manufacture - "
            - elsif ticket_spare_part.ticket_spare_part_non_stock
              = "Non Stock(Service) - "
            = ticket_spare_part.cus_chargeable_part ? "Chargeable" : "Non-chargeable"

          - if ticket_spare_part.ticket_spare_part_non_stock
            %hr          
            - if ticket_spare_part.ticket_spare_part_non_stock.inventory_product
              .col-md-3
                %strong
                  Item Code:
                = ticket_spare_part.ticket_spare_part_non_stock.inventory_product.generated_item_code
              .col-md-3
                %strong
                  Model No:
                = ticket_spare_part.ticket_spare_part_non_stock.inventory_product.try(:model_no)
              .col-md-2
                %strong
                  Required Qty:
                = ticket_spare_part.ticket_spare_part_non_stock.approval_required and ticket_spare_part.ticket_spare_part_non_stock.approved ? ticket_spare_part.ticket_spare_part_non_stock.approved_quantity : ticket_spare_part.ticket_spare_part_non_stock.requested_quantity
              .col-md-3
                %strong
                  Item Description:
                = ticket_spare_part.ticket_spare_part_non_stock.inventory_product.description
              .col-md-3
                %strong
                  Manufacture:
                = ticket_spare_part.ticket_spare_part_non_stock.inventory_product.inventory_product_info and ticket_spare_part.ticket_spare_part_non_stock.inventory_product.inventory_product_info.manufacture.try(:manufacture)
              %hr

              .col-md-3
                %strong
                  Product No:
                = ticket_spare_part.ticket_spare_part_non_stock.inventory_product.try(:product_no)
              .col-md-3
                %strong
                  Part No:
                = ticket_spare_part.ticket_spare_part_non_stock.inventory_product.try(:spare_part_no)

          - if ticket_spare_part.ticket_spare_part_store
            %hr          
            - if ticket_spare_part.ticket_spare_part_store.inventory_product
              .col-md-2
                %strong
                  Item Code:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.generated_item_code
              .col-md-3
                %strong
                  Item Description:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.description
              .col-md-3
                %strong
                  Manufacture:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.inventory_product_info and ticket_spare_part.ticket_spare_part_store.inventory_product.inventory_product_info.manufacture.try(:manufacture)
              .col-md-2
                %strong
                  Model No:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.try(:model_no)
              .col-md-2
                %strong
                  Required Qty:
                = ticket_spare_part.ticket_spare_part_store.store_request_approved ? ticket_spare_part.ticket_spare_part_store.approved_quantity : ticket_spare_part.ticket_spare_part_store.requested_quantity
              %hr

              .col-md-3
                %strong
                  Product No:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.try(:product_no)
              .col-md-3
                %strong
                  Part No:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.try(:spare_part_no)
              .col-md-3
                %strong
                  Unit:
                = ticket_spare_part.ticket_spare_part_store.inventory_product.inventory_unit and ticket_spare_part.ticket_spare_part_store.inventory_product.inventory_unit.unit
            .col-md-3
              %strong
                Store:
              = ticket_spare_part.ticket_spare_part_store.store.try(:name)

            - if ticket_spare_part.ticket_spare_part_store.main_inventory_product
              %hr            
              .col-md-3
                %strong{title: "Main Part"}
                  M.P.Item Code:
                = ticket_spare_part.ticket_spare_part_store.main_inventory_product.try(:generated_item_code)
              .col-md-3{title: "Main Part"}
                %strong
                  M.P.Item description:
                = ticket_spare_part.ticket_spare_part_store.main_inventory_product.try(:description)
              .col-md-3{title: "Main Part"}
                %strong
                  M.P.Item model no:
                = ticket_spare_part.ticket_spare_part_store.main_inventory_product.try(:model_no)
              .col-md-3{title: "Main Part"}
                %strong
                  M.P.Item product no:
                = ticket_spare_part.ticket_spare_part_store.main_inventory_product.try(:product_no)


          - ticket_spare_part.ticket_estimation_parts.each do |tsp|
            %hr          
            - if ticket_spare_part.cus_chargeable_part
              .col-md-3
                %strong 
                  Estimated price (#{tsp.ticket_estimation.currency.code}):
                #{number_with_precision tsp.estimated_price, precision: 2}

              .col-md-3
                %strong
                  Estimated by:
                #{User.cached_find_by_id(tsp.ticket_estimation.estimated_by).try(:email)}

              .col-md-3
                %strong
                  Estimated at:
                #{tsp.ticket_estimation.estimated_at.try(:strftime, "%Y-%m-%d %H:%M")}

              .col-md-3
                %strong
                  Advance payment amount (#{tsp.ticket_estimation.currency.code}):
                = tsp.ticket_estimation.advance_payment_amount

              .col-md-3
                %strong
                  Est. additional amount (#{tsp.ticket_estimation.currency.code}):
                = number_with_precision tsp.ticket_estimation.ticket_estimation_additionals.sum(:estimated_price), precision: 2
              .col-md-3
                %strong
                  Estimate warranty:
                = tsp.warranty_period


            - if tsp.ticket_estimation.cust_approval_required
              .col-md-3
                %strong Customer approved:
                #{tsp.ticket_estimation.cust_approved ? "Yes" : "No"}

              .col-md-3
                %strong Customer approved by:
                #{User.cached_find_by_id(tsp.ticket_estimation.cust_approved_by).try(:email)}

              .col-md-3
                %strong Customer approved at:
                #{tsp.ticket_estimation.cust_approved_at.try(:strftime, "%Y-%m-%d %H:%M")}

          - if ticket_spare_part.ticket_spare_part_store
            %hr
            .col-md-3
              %strong Store requested by:
              #{User.cached_find_by_id(ticket_spare_part.ticket_spare_part_store.try(:store_requested_by)).try(:email)}

            .col-md-3
              %strong Store requested at:
              #{ticket_spare_part.ticket_spare_part_store.try(:store_requested_at).try(:strftime, "%Y-%m-%d %H:%M")}

            .col-md-3
              %strong Request approved:
              #{ticket_spare_part.ticket_spare_part_store.store_request_approved ? "Yes" : "No"}

            .col-md-3
              %strong Request approved by:
              #{User.cached_find_by_id(ticket_spare_part.ticket_spare_part_store.store_request_approved_by).try(:email)}

            .col-md-3
              %strong Request approved at:
              #{ticket_spare_part.ticket_spare_part_store.store_request_approved_at.try(:strftime, "%Y-%m-%d %H:%M")}              

          %hr
          - if ticket_spare_part.ticket_spare_part_store
            .col-md-3
              %strong Issued by:
              #{User.find_by_id(ticket_spare_part.ticket_spare_part_store.try(:issued_by)).try(:email)}

            .col-md-3
              %strong Issued at:
              #{ticket_spare_part.ticket_spare_part_store.issued_at.try(:strftime, "%Y-%m-%d %H:%M")}  

          - if ticket_spare_part.ticket_spare_part_manufacture
            .col-md-3
              %strong Issued:
              #{ticket_spare_part.ticket_spare_part_manufacture.issued ? "Yes" : "No"}

          .col-md-3
            %strong
              Received Spare Part No:
            = ticket_spare_part.received_spare_part_no
          .col-md-3
            %strong
              Repair start:
            = ticket_spare_part.repare_start.try(:localtime).try(:strftime, "%Y-%m-%d %H:%M")
            %br/
            %strong
              Repair end:
            = ticket_spare_part.repare_end.try(:localtime).try(:strftime, "%Y-%m-%d %H:%M")
            %br/
            %strong
              Duration:
            = distance_of_time_in_words(ticket_spare_part.repare_start, ticket_spare_part.repare_end) if ticket_spare_part.repare_start and ticket_spare_part.repare_end
          %hr

          .col-md-3
            %strong
              Part receive status:
            = ticket_spare_part.spare_part_status_use.name
          .col-md-3
            %strong
              Receive part Serial No:
            = ticket_spare_part.received_part_serial_no

          .col-md-3
            %strong
              Receive part CT No:
            = ticket_spare_part.received_part_ct_no

          - if ticket_spare_part.ticket_spare_part_manufacture
            .col-md-3
              %strong
                Expected amount (Manufacture #{product.product_brand.currency.code}):
              = ticket_spare_part.ticket_spare_part_manufacture.payment_expected_manufacture
            %hr

          - if ticket_spare_part.ticket_spare_part_manufacture
            .col-md-3
              %strong
                Part Order No:
              = ticket_spare_part.ticket_spare_part_manufacture.order_no

            .col-md-3
              %strong
                Part Event No:
              = ticket_spare_part.ticket_spare_part_manufacture.event_no
            .col-md-3
              %strong
                Requested Qty:
              = ticket_spare_part.ticket_spare_part_manufacture.requested_quantity
            .col-md-3
              %strong
                Part Event Closed:
              = ticket_spare_part.ticket_spare_part_manufacture.event_closed ? "Yes" : "No"

          %hr
          .col-md-3
            %strong
              Part Returned:
            = ticket_spare_part.part_returned ? "Yes" : "No"
          .col-md-3
            %strong
              Return Part Serial No:
            = ticket_spare_part.return_part_serial_no
          .col-md-3
            %strong
              Return Part CT No:
            = ticket_spare_part.return_part_ct_no
          - unless ticket_spare_part.request_from == "NS"
            .col-md-3
              %strong
                Close approved:
              = ticket_spare_part.close_approved ? "Approved" : "Not approved"

        - if ticket_spare_part.part_terminated
          %hr
          .col-md-3
            %strong
              Request Terminated
          .col-md-3
            %strong
              Terminate Reason:
            = ticket_spare_part.part_terminated_reason.try(:reason)


      = simple_form_for ticket_spare_part, url: update_part_order_inventories_path, method: :put, html: {class: "validate_form"} do |f| # update_part_order_inventories_path

        = hidden_field_tag :process_id, Rails.cache.fetch([uri.path, params[:task_id]])[:process_id]
        = hidden_field_tag :task_id, Rails.cache.fetch([uri.path, params[:task_id]])[:task_id]
        = hidden_field_tag :owner, Rails.cache.fetch([uri.path, params[:task_id]])[:owner]
        - Rails.cache.fetch([uri.path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
          = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

        = hidden_field_tag :ticket_spare_part_id, ticket_spare_part.id
        .row
          .col-md-5
            %strong
              Returned quantity:
            = ticket_spare_part.ticket_spare_part_store ? ticket_spare_part.ticket_spare_part_store.approved_quantity : ''

        - if (rqt and non_stock_warranty) or (cea and non_stock_chargeable)
          .row
            = f.input :repare_start, as: :string,label: "Repair start", input_html: {class: "datetimepicker", value: f.object.repare_start.try(:localtime).try(:strftime, "%m/%d/%Y %I:%M %p")}, wrapper_html: {class: "position_relative col-md-6"}, required: true

            = f.input :repare_end, as: :string,label: "Repair end", input_html: {class: "datetimepicker", value: f.object.repare_end.try(:localtime).try(:strftime, "%m/%d/%Y %I:%M %p")}, wrapper_html: {class: "position_relative col-md-6"}, required: true

          .row
            = f.association :spare_part_status_use, collection: SparePartStatusUse.offset(1).map{|s| [s.name, s.id]}, include_blank: false, required: true, selected: 2, wrapper_html: {class: "col-md-6"}, label: "Received part status", input_html: {class: "received_part_status chosen-select_disable_search"}
            = f.association :unused_reason, label_method: :reason, value_method: :id, required: true, include_blank: false, wrapper_html: {class: "col-md-6"}, input_html: {class: "unused_reason chosen-select_disable_search"}, disabled: true

        - if (rce and (manufacture_warranty or manufacture_chargeable or store_warranty or store_chargeable)) or ((manufacture_warranty or manufacture_chargeable) and rpr) or ((store_chargeable or store_warranty) and rpr)
          .row
            = f.input :received_spare_part_no, wrapper_html: {class: "col-md-12"}, required: true, input_html: {value: (f.object.received_spare_part_no || f.object.spare_part_no)}
            = f.input :faulty_serial_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "faulty_serial_no_input", autocomplete: "off"}
            = f.input :faulty_ct_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "faulty_ct_no_input", autocomplete: "off"}

            = f.input :received_part_serial_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "received_part_serial_no_input", autocomplete: "off"}
            = f.input :received_part_ct_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "received_part_ct_no_input", autocomplete: "off"}

          - if (rce and (manufacture_warranty or manufacture_chargeable or store_warranty or store_chargeable))
            .row
              = f.input :repare_start, as: :string, label: "Repair start", input_html: {class: "datetimepicker", value: f.object.repare_start.try(:localtime).try(:strftime, "%m/%d/%Y %I:%M %p")}, wrapper_html: {class: "position_relative col-md-6"}, required: true

              = f.input :repare_end, as: :string, label: "Repair end", input_html: {class: "datetimepicker", value: f.object.repare_end.try(:localtime).try(:strftime, "%m/%d/%Y %I:%M %p")}, wrapper_html: {class: "position_relative col-md-6"}, required: true

          .row
            = f.association :spare_part_status_use, collection: SparePartStatusUse.offset(1).map{|s| [s.name, s.id]}, required: true, include_blank: false, selected: 2, wrapper_html: {class: "col-md-6"}, label: "Received part status", input_html: {class: "received_part_status chosen-select_disable_search"}
            = f.association :unused_reason, label_method: :reason, value_method: :id, required: true, include_blank: false, wrapper_html: {class: "col-md-6"}, input_html: {class: "unused_reason chosen-select_disable_search"}, disabled: true

          - if f.object.ticket_spare_part_store.present?
            .row
              = f.simple_fields_for :ticket_spare_part_store do |s|
                .col-md-6
                  = s.check_box :return_part_damage, {class: "damage_reason_check"}, 1,0
                  = s.label :return_part_damage
                  = s.select :return_part_damage_reason_id, InventoryReason.where(damage: true).map{|r| [r.reason, r.id]}, {}, class: "damage_reason"


        - if (rce and (manufacture_warranty or manufacture_chargeable or store_warranty or store_chargeable)) or ((manufacture_warranty or manufacture_chargeable) and rpr) or ((store_chargeable or store_warranty) and rpr)
          .row
            .col-md-6
              %strong Return part serial no:
              %span.return_part_serial_no_text= f.object.return_part_serial_no

            .col-md-6
              %strong Return part ct no:
              %span.return_part_ct_no_text= f.object.return_part_ct_no
            = f.input :return_part_serial_no, as: :hidden, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "return_part_serial_no"}
            = f.input :return_part_ct_no, as: :hidden, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "return_part_ct_no"}


        = f.input :note, input_html: {value: nil} if !(ord or clt or rcs or rtn or rpa or bnd or cls or aps or (str and store_chargeable) or rjs or rbn )
        = simple_format ticket_spare_part.note
        - if store_chargeable and cea
          .store_request_wrapper
            = f.submit "Store request", name: "store_request", class: "btn btn-sm btn-success"

        - if manufacture_chargeable and cea
          = hidden_field_tag :manufacture_request, "manufacture_request"
          = f.submit "Manufacture request", name: "manufacture_request", class: "btn btn-sm btn-success"

        - if iss and (manufacture_warranty or manufacture_chargeable or store_warranty or store_chargeable)
          = hidden_field_tag :recieved, "recieved"
          = f.submit "received", name: "recieved", class: "btn btn-sm btn-success"

        - if (non_stock_chargeable and cea) or (non_stock_warranty and rqt)
          = hidden_field_tag :non_stock_complete, "non_stock_complete"
          = f.submit "Complete", name: "non_stock_complete", class: "btn btn-sm btn-success"
            
        - if (rce or rpr) #manufacture_warranty and (rce or rpr)
          %label{:for => "Update without return"} Update without return
          = check_box_tag "update_without_return", false, false, class: "small_scale_margin-right1"
          = hidden_field_tag :return, "return"

          = f.submit "Return", name: "return", class: "btn btn-sm btn-success"#, onclick: "Tickets.presence_validater(this, {presence: ['#ticket_spare_part_received_spare_part_no', '#ticket_spare_part_faulty_serial_no', '#ticket_spare_part_faulty_ct_no', '#ticket_spare_part_received_part_serial_no', '#ticket_spare_part_received_part_ct_no', '#ticket_spare_part_repare_start', '#ticket_spare_part_repare_end'], checked: ['b']}); return false;"

        - if (mpr and manufacture_warranty) or (store_warranty and str) or (store_chargeable and (rqt or ecm or cea)) or (manufacture_chargeable and (rqt or ecm or cea)) or (non_stock_chargeable and (rqt or ecm or cea)) or (non_stock_warranty and rqt)
          = f.input :part_terminated, wrapper: :append, input_html:{class: "part_terminated_reason_check"}

          .part_terminated_reason.hide

            = f.label "Part terminate reason"
            = f.select :part_terminated_reason_id, Reason.where(terminate_spare_part: true).map{|r| [r.reason, r.id]}, {include_blank: false}, {class: "part_terminated_select"} # showing part_terminated is cheched through javascript
            / = hidden_field_tag :terminate, "terminate"
            = f.submit "terminate", name: "terminate", class: "btn btn-sm btn-success"


  - ticket.ticket_on_loan_spare_parts.each do |ticket_on_loan_spare_part|
    = collapse collapse_type: "info", header_content: "Ticket spare part (On-loan): #{ticket_on_loan_spare_part.inventory_product.generated_item_code} - #{ticket_on_loan_spare_part.inventory_product.description}", collapse_link: "ticket_on_loan_spare_part_link_#{ticket_on_loan_spare_part.id}", collapse_id: "ticket_spare_part_id", labelledby: "ticket_spare_on_loan_part_lby_#{ticket_on_loan_spare_part.id}" do

      .alert.alert-warning
        .row
          - ticket_spare_part_ref = ticket_on_loan_spare_part.ticket_spare_part

          - rce = ticket_on_loan_spare_part.spare_part_status_action.code == "RCE" #Received by Engineerspare_part_status_action
          - rpr = ticket_on_loan_spare_part.spare_part_status_action.code == "RPR" #Returned Part Reject
          - rqt = ticket_on_loan_spare_part.spare_part_status_action.code == "RQT" #Requested
          - str = ticket_on_loan_spare_part.spare_part_status_action.code == "STR" #Request from Store
          - ecm = ticket_on_loan_spare_part.spare_part_status_action.code == "ECM" #Estimation Completed
          - cea = ticket_on_loan_spare_part.spare_part_status_action.code == "CEA" #Cus. Estimation Approved
          - iss = ticket_on_loan_spare_part.spare_part_status_action.code == "ISS" #Issued

          - ord = ticket_on_loan_spare_part.spare_part_status_action.code == "ORD" #Ordered from Manufacturer
          - clt = ticket_on_loan_spare_part.spare_part_status_action.code == "CLT" #Collected from Manufacturer
          - rcs = ticket_on_loan_spare_part.spare_part_status_action.code == "RCS" #Received from Manufacturer
          - rtn = ticket_on_loan_spare_part.spare_part_status_action.code == "RTN" #Part Return by Engineer
          - rpa = ticket_on_loan_spare_part.spare_part_status_action.code == "RPA" #Returned Part Accepted
          - bnd = ticket_on_loan_spare_part.spare_part_status_action.code == "BND" #Part Bundled
          - cls = ticket_on_loan_spare_part.spare_part_status_action.code == "CLS" #Close
          - aps = ticket_on_loan_spare_part.spare_part_status_action.code == "APS" #Approved Store Request
          - rjs = ticket_on_loan_spare_part.spare_part_status_action.code == "RJS" #Reject Store Request
          - rbn = ticket_on_loan_spare_part.spare_part_status_action.code == "RBN" #Ready to Bundle            

          .col-md-3
            %strong
              Ref. Spare Part No:
            = ticket_spare_part_ref.try(:spare_part_no)
          .col-md-3
            %strong
              Ref. Description:
            = ticket_spare_part_ref.try(:spare_part_description)

          .col-md-3
            %strong
              Requested:
            - if ticket_on_loan_spare_part.requested_at
              #{ticket_on_loan_spare_part.requested_at.try(:strftime, "%Y-%m-%d %H:%M")} by #{User.cached_find_by_id(ticket_on_loan_spare_part.requested_by).try(:email)}

          .col-md-3
            %strong
              Action Status:
            = ticket_on_loan_spare_part.spare_part_status_action.name
            = link_to "history", "#", tabindex: "0", rel: "popover", title: "Action History", data: {toggle: "popover", trigger: "click", content: ticket_on_loan_spare_part.ticket_on_loan_spare_part_status_actions.map { |tsp| "#{tsp.spare_part_status_action.name} <span class='text-muted text3'>#{User.cached_find_by_id(tsp.done_by).email}-#{tsp.done_at.strftime('%Y-%m-%d %H:%M %P')}</span>" }.join("<br/>"), placement: "bottom", html: true}

            %br/
            %strong Pending:

            - if ticket_on_loan_spare_part.spare_part_status_action.code == "RPR"
              - next_index = ticket_on_loan_spare_part.spare_part_status_action.on_loan_type_index - 1
            - else
              - next_index = ticket_on_loan_spare_part.spare_part_status_action.on_loan_type_index + 1

            = SparePartStatusAction.find_by_on_loan_type_index(next_index).try(:name_next) unless (next_index > 7) or (ticket_on_loan_spare_part.spare_part_status_action.on_loan_type_index == 0) or (ticket_on_loan_spare_part.spare_part_status_action.code == "RJS")

          %hr

          .col-md-3
            %strong
              FSR No:
              = ticket_on_loan_spare_part.ticket_spare_part.try(:ticket_fsr) and ticket_on_loan_spare_part.ticket_spare_part.ticket_fsr.ticket_fsr_no.to_s.rjust(6, INOCRM_CONFIG["fsr_no_format"])
          .col-md-3
            %strong
              Faulty Serial No:
          .col-md-3
            %strong
              Faulty CT No:
          .col-md-3
            %strong
              Request type:
            = "On-Loan Store"
          %hr

          .col-md-2
            %strong
              Item Code:
            = ticket_on_loan_spare_part.inventory_product.generated_item_code
          .col-md-3
            %strong
              Item Description:
            = ticket_on_loan_spare_part.inventory_product.description
          .col-md-3
            %strong
              Manufacture:
            = ticket_on_loan_spare_part.inventory_product.inventory_product_info and ticket_on_loan_spare_part.inventory_product.inventory_product_info.manufacture.try(:manufacture)
          .col-md-2
            %strong
              Model No:
            = ticket_on_loan_spare_part.inventory_product.try(:model_no)
          .col-md-2
            %strong
              Requested Qty:
            = ticket_on_loan_spare_part.requested_quantity
          %hr

          .col-md-3
            %strong
              Product No:
            = ticket_on_loan_spare_part.inventory_product.try(:product_no)
          .col-md-3
            %strong
              Part No:
          .col-md-3
            %strong
              Unit:
            = ticket_on_loan_spare_part.inventory_product.inventory_unit and ticket_on_loan_spare_part.inventory_product.inventory_unit.unit
          .col-md-3
            %strong
              Store:
            = ticket_on_loan_spare_part.store.try(:name)
          %hr

          - if ticket_on_loan_spare_part.main_inventory_product
            .col-md-3
              %strong{title: "Main Part"}
                M.P.Item Code:
              = ticket_on_loan_spare_part.main_inventory_product.try(:generated_item_code)
            .col-md-3{title: "Main Part"}
              %strong
                M.P.Item description:
              = ticket_on_loan_spare_part.main_inventory_product.try(:description)
            .col-md-3{title: "Main Part"}
              %strong
                M.P.Item model no:
              = ticket_on_loan_spare_part.main_inventory_product.try(:model_no)
            .col-md-3{title: "Main Part"}
              %strong
                M.P.Item product no:
              = ticket_on_loan_spare_part.main_inventory_product.try(:product_no)

          %hr       
            .col-md-3
              %strong Request approved:
              #{ticket_on_loan_spare_part.approved ? "Yes" : "No"}

            .col-md-3
              %strong Request approved by:
              #{User.cached_find_by_id(ticket_on_loan_spare_part.approved_by).try(:email)}

            .col-md-3
              %strong Request approved at:
              #{ticket_on_loan_spare_part.approved_at.try(:strftime, "%Y-%m-%d %H:%M")}              

            .col-md-3
              %strong Issued by:
              #{User.cached_find_by_id(ticket_on_loan_spare_part.try(:issued_by)).try(:email)}

            .col-md-3
              %strong Issued at:
              #{ticket_on_loan_spare_part.issued_at.try(:strftime, "%Y-%m-%d %H:%M")}  

          %hr

          .col-md-3
            %strong
              Repair start:
            = ticket_on_loan_spare_part.repare_start.try(:localtime).try(:strftime, "%Y-%m-%d %H:%M")
            %br/
            %strong
              Repair end:
            = ticket_on_loan_spare_part.repare_end.try(:localtime).try(:strftime, "%Y-%m-%d %H:%M")
            %br/
            %strong
              Duration:
            = distance_of_time_in_words(ticket_on_loan_spare_part.repare_start, ticket_on_loan_spare_part.repare_end) if ticket_on_loan_spare_part.repare_start and ticket_on_loan_spare_part.repare_end

          .col-md-3
            %strong
              Receive part Serial No:
            = ticket_on_loan_spare_part.received_part_serial_no

          .col-md-3
            %strong
              Receive part CT No:
            = ticket_on_loan_spare_part.received_part_ct_no            
          %hr

          .col-md-3
            %strong
              Part used status:
            = ticket_on_loan_spare_part.spare_part_status_use.name
          .col-md-3
            %strong
              Part Returned:
            = ticket_on_loan_spare_part.part_returned ? "Yes" : "No"
          .col-md-3
            %strong
              Return Part Serial No:
            = ticket_on_loan_spare_part.return_part_serial_no
          .col-md-3
            %strong
              Return Part CT No:
            = ticket_on_loan_spare_part.return_part_ct_no

        - if ticket_on_loan_spare_part.part_terminated
          %hr
          .col-md-3
            %strong
              Request Terminated
          .col-md-3
            %strong
              Terminate Reason:
            = ticket_on_loan_spare_part.part_terminated_reason.try(:reason)                  

      = simple_nested_form_for ticket_on_loan_spare_part, url: update_onloan_part_order_inventories_path, method: :put, html: {class: "validate_form"} do |f| #ticket_on_loan_spare_part as object

        = hidden_field_tag :process_id, Rails.cache.fetch([uri.path, params[:task_id]])[:process_id]
        = hidden_field_tag :task_id, Rails.cache.fetch([uri.path, params[:task_id]])[:task_id]
        = hidden_field_tag :owner, Rails.cache.fetch([uri.path, params[:task_id]])[:owner]
        - Rails.cache.fetch([uri.path, params[:task_id]])[:bpm_input_variables].each do |bpm_input_variable|
          = hidden_field_tag bpm_input_variable[0], bpm_input_variable[1]

        = hidden_field_tag :ticket_on_loan_spare_part_id, ticket_on_loan_spare_part.id
        = f.input :id, as: :hidden

        - if rce or rpr
          .row
            = f.input :received_part_serial_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "received_part_serial_no_input", autocomplete: "off"}
            = f.input :received_part_ct_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "received_part_ct_no_input", autocomplete: "off"}

          .row
            = f.association :spare_part_status_use, collection: SparePartStatusUse.offset(1).map{|s| [s.name, s.id]}, required: true, include_blank: false, selected: 2, wrapper_html: {class: "col-md-6"}, label: "Received part status", input_html: {class: "received_part_status chosen-select_disable_search"}
            = f.association :unused_reason, label_method: :reason, value_method: :id, required: true, include_blank: false, wrapper_html: {class: "col-md-6"}, input_html: {class: "unused_reason chosen-select_disable_search"}, disabled: true

          .row
            .col-md-6.hide
              %strong Return part serial no:
              %span.return_part_serial_no_text= f.object.return_part_serial_no

            .col-md-6.hide
              %strong Return part ct no:
              %span.return_part_ct_no_text= f.object.return_part_ct_no
            = f.input :return_part_serial_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "return_part_serial_no onloan"}
            = f.input :return_part_ct_no, wrapper_html: {class: "col-md-6"}, required: true, input_html: {class: "return_part_ct_no onloan"}

        - if rce or rpr
          .row
            .col-md-6
              = f.check_box :return_part_damage, {class: "damage_reason_check"}, 1,0
              = f.label :return_part_damage
              = f.select :return_part_damage_reason_id, InventoryReason.where(damage: true).map{|r| [r.reason, r.id]}, {}, class: "damage_reason"

          = f.input :note, input_html: {value: nil}
          = simple_format ticket_on_loan_spare_part.note

        - if str
          = f.input :part_terminated, wrapper: :append, input_html:{class: "part_terminated_reason_check"}

          .part_terminated_reason.hide

            = f.label "Part terminate reason"
            = f.select :part_terminated_reason_id, Reason.where(terminate_spare_part: true).map{|r| [r.reason, r.id]}, {include_blank: true}, {class: "part_terminated_select"} # showing part_terminated is cheched through javascript
          = hidden_field_tag :terminate, "terminate"

        = f.submit "terminate", name: "terminate", class: "btn btn-sm btn-success" if str
        = f.submit "received", name: "recieved", class: "btn btn-sm btn-success" if iss
        - if rce or rpr
          %label{:for => "Update without return"} Update without return
          = check_box_tag "update_without_return", true, false, class: "small_scale_margin-right1"
          = f.submit "return", name: "return", class: "btn btn-sm btn-success"