- contract = @contract
- organization = @organization
.row
  %h3 Customer Information
  .col-md-5
    %dl.dl-horizontal
      %dt Customer Name:
      %dd= organization.try(:name)
      %dt Address:
      %dd
        - organization.addresses.primary_address.each do |address|
          = address.full_address
      %dt Account no:
      %dd= organization.account.account_no
      %dt Customer code:
      %dd= organization.account.try(:code)
  .col-md-4
    %dl.dl-horizontal
      %dt Created at:
      %dd= organization.created_at.try(:strftime, INOCRM_CONFIG['short_date_format'])
      %dt Created by:
      %dd= organization.created_by_user.try(:full_name)
  .col-md-2{style: "background-color: #{contract.contract_status.try(:colour_code)}; text-align:center; padding: 15px; border: 1px solid #000000;"}
    %font{:color => "black", :size => "3"}
      %strong Status: #{contract.contract_status.try(:name)}
- additional_charges_array = [[ "",""],[ "Option 1","1"],[ "Option 2","2"]]
- season_array = [[ "",""],[ "Season 1","1"],[ "Season 2","2"]]
%br

/ %font{:color => "#393939", :size => "4"}
/   %strong Contract Details For Contract No :
/ %font{:color => "#4355f2", :size => "3"}
/   %strong #{contract.contract_no}
%br
%br
%br
- contract_product_required = INOCRM_CONFIG['contract_product_required']
= simple_nested_form_for contract, url: save_contracts_path(organization_id: organization.try(:id)), html: {class: "validate_form"}, method: :post, remote: true, multipart: true do |f|
  = hidden_field_tag :contract_id, contract.id

  = f.input :customer_id, as: :hidden
  = f.input :created_by, as: :hidden, input_html: {value: current_user.id}

  - if contract.errors.any?
    .row
      .col-md-12
        %ul
          - contract.errors.full_messages.each do |error|
            %li= error
  .row
    .col-md-3
      = f.input :contract_no, disabled: contract_product_required
  .row
    .col-md-3
      = f.input :legacy_contract_no
    .col-md-2
      = f.association :ticket_contract_type, include_blank: false, required: true, label: "Contract Type"
    .col-md-2
      = f.association :ticket_currency, label_method: :code, label: "Currency", required: true, include_blank: false

    .col-md-2
      = f.association :sla_time, required: true, label_method: :description, include_blank: false, label: "SLA"
    .col-md-3
      = label_tag "Service Provider" do
        Service Provider
        = f.select :owner_organization_id, ( Organization.owner.members.collect{ |m| [m.name, m.id ] } << [Organization.owner.name, Organization.owner.id] ), {include_blank: false}, {class: "form-control col-md-12 small_scale_margin-top2"}

  .row
    .col-md-4
      = f.input :contract_start_at, as: :string, required: true,input_html: {class: "datepicker", value: f.object.contract_start_at.try(:strftime, INOCRM_CONFIG["short_date_format"]), onblur:"Tickets.show_date();"}
    .col-md-4
      = f.input :contract_end_at, as: :string, required: true, input_html: {class: "datepicker", value: f.object.contract_end_at.try(:strftime, INOCRM_CONFIG["short_date_format"])}
    .col-md-4
      = f.input :process_at, as: :string, required: true, input_html: {class: "datepicker", value: f.object.process_at.try(:strftime, INOCRM_CONFIG["short_date_format"])}
    .col-md-4
      = f.input :hold, wrapper: :append
    .col-md-4
      = f.input :contract_b2b, wrapper: :append, label: "Back to Back Contract"
    .col-md-4.hide
      = f.input :remind_required, wrapper: :append, label: "Need Remind before Expiry"
  %br
  .row
    .col-md-2
      = f.association :organization_bill, label: "Bill company", required: true, collection: (organization.anchestors.map{|m| m[:member]}.uniq{|m| m.id})
    .col-md-3
      = f.association :bill_address, collection: (organization.anchestors.map{|m| m[:member]}.uniq{|m| m.id}), as: :grouped_select, group_method: :addresses, label_method: :full_address, required: true
    .col-md-2
      = f.association :organization_contact, label: "Address company", required: true, collection: (organization.anchestors.map{|m| m[:member]}.uniq{|m| m.id})
    .col-md-3
      = f.association :contact_address, collection: (organization.anchestors.map{|m| m[:member]}.uniq{|m| m.id}), as: :grouped_select, group_method: :addresses, label_method: :full_address, required: true
    .col-md-2
      = f.association :organization_contact_person, collection: (organization.organization_contact_persons),include_blank: false, required: true, label: "Contact Person"
  %br
  .row

    = hidden_field_tag :product_count, contract.num_of_products, onclick:"Tickets.brand_edit();"
    - if contract.num_of_products > 0
      .product_brand_main.hide
        .col-md-3
          = f.association :product_brand, required: contract_product_required, include_blank: true
        .col-md-3
          - if contract_product_required
            %font{:color => "#90032A"}
              = label_tag "#{CompanyConfig.first.try(:sup_product_category1_label)} :"
          - else
            = label_tag "#{CompanyConfig.first.try(:sup_product_category1_label)} :"
          = f.association :product_category1, collection: ProductBrand.all, as: :grouped_select, group_method: :product_category1s, group_label_method: :id, value_method: :id, required: contract_product_required, input_html: {class: "product_category1", id: "search_product_category1"}, label: false
        .col-md-3
          - if contract_product_required
            %font{:color => "#90032A"}
              = label_tag "#{CompanyConfig.first.try(:sup_product_category2_label)} :"
          - else
            = label_tag "#{CompanyConfig.first.try(:sup_product_category2_label)} :"
          = f.association :product_category2, collection: ProductCategory1.all, as: :grouped_select, group_method: :product_category2s, group_label_method: :id, value_method: :id, required: contract_product_required, input_html: {class: "product_category2", id: "search_product_category2"}, label: false
        .col-md-3
          - if contract_product_required
            %font{:color => "#90032A"}
              = label_tag "#{CompanyConfig.first.try(:sup_product_category_label)} :"
          - else
            = label_tag "#{CompanyConfig.first.try(:sup_product_category_label)} :"
          = f.association :product_category, collection: ProductCategory2.all, as: :grouped_select, group_method: :product_categories, group_label_method: :id, value_method: :id, required: contract_product_required, input_html: {class: "product_category chosen-select"}, label: false
      .product_brand_show
        .col-md-3
          %strong Product Brand :
          = text_field_tag :product_brand1,contract.product_brand.try(:name), disabled:true
        .col-md-3
          %strong #{CompanyConfig.first.try(:sup_product_category1_label)} :
          = text_field_tag :product_cat1,contract.try(:product_category).try(:product_category2).try(:product_category1).try(:name), disabled:true
        .col-md-3
          %strong #{CompanyConfig.first.try(:sup_product_category2_label)} :
          = text_field_tag :product_cat2,contract.try(:product_category).try(:product_category2).try(:name), disabled:true
        .col-md-3
          %strong #{CompanyConfig.first.try(:sup_product_category_label)} :
          = text_field_tag :product_cat3,contract.try(:product_category).try(:name), disabled:true

    - else
      .product_brand_main
        .col-md-3
          = f.association :product_brand, required: contract_product_required, include_blank: true
        .col-md-3
          - if contract_product_required
            %font{:color => "#90032A"}
              = label_tag "#{CompanyConfig.first.try(:sup_product_category1_label)} :"
          - else
            = label_tag "#{CompanyConfig.first.try(:sup_product_category1_label)} :"
          / %font{:color => "black"}
          /   %strong #{contract.try(:product_category).try(:product_category2).try(:product_category1).try(:name)}
          = f.association :product_category1, collection: ProductBrand.all, as: :grouped_select, group_method: :product_category1s, group_label_method: :id, value_method: :id,  required: contract_product_required, input_html: {class: "product_category1", id: "search_product_category1"}, label: false
          / = select_tag "search_product_category1", option_groups_from_collection_for_select(ProductBrand.all, :product_category1s, :name, :id, :name, "#"), include_blank: true, class: "product_category1 form-control"
          
        .col-md-3
          - if contract_product_required
            %font{:color => "#90032A"}
              = label_tag "#{CompanyConfig.first.try(:sup_product_category2_label)} :"
          - else
            = label_tag "#{CompanyConfig.first.try(:sup_product_category2_label)} :"
            / %font{:color => "black"}
            /   %strong #{contract.try(:product_category).try(:product_category2).try(:name)}
          = f.association :product_category2, collection: ProductCategory1.all, as: :grouped_select, group_method: :product_category2s, group_label_method: :id, value_method: :id, required: contract_product_required, input_html: {class: "product_category2", id: "search_product_category2"}, label: false
  
        .col-md-3
          - if contract_product_required
            %font{:color => "#90032A"}
              = label_tag "#{CompanyConfig.first.try(:sup_product_category_label)} :"
          - else
            = label_tag "#{CompanyConfig.first.try(:sup_product_category_label)} :"
            / %font{:color => "black"}
            /   %strong #{contract.try(:product_category).try(:name)}
          = f.association :product_category, collection: ProductCategory2.all, as: :grouped_select, group_method: :product_categories, group_label_method: :id, value_method: :id, required: contract_product_required, input_html: {class: "product_category chosen-select"}, label: false
      .product_brand_show.hide
        .col-md-3
          %strong Product Brand :
          = text_field_tag :product_brand1,contract.product_brand.try(:name), disabled:true
        .col-md-3
          %strong #{CompanyConfig.first.try(:sup_product_category1_label)} :
          = text_field_tag :product_cat1,contract.try(:product_category).try(:product_category2).try(:product_category1).try(:name), disabled:true
        .col-md-3
          %strong #{CompanyConfig.first.try(:sup_product_category2_label)} :
          = text_field_tag :product_cat2,contract.try(:product_category).try(:product_category2).try(:name), disabled:true
        .col-md-3
          %strong #{CompanyConfig.first.try(:sup_product_category_label)} :
          = text_field_tag :product_cat3,contract.try(:product_category).try(:name), disabled:true
  %br
  .row
    .col-md-2
      = label_tag "Additional Charges" do
        Additional Charges
        = f.select :additional_charges, additional_charges_array, {}, {class: "form-control col-md-12 small_scale_margin-top4"}
    .col-md-2
      = label_tag "Season" do
        Season
        = f.select :season, season_array, {},{class: "form-control col-md-12 small_scale_margin-top4"}
    .col-md-2
      = f.association :ticket_contract_payment_type, include_blank: false, label: "Payment Type"
    .col-md-2
      = f.input :accepted_at, as: :string, input_html: {class: "datepicker", value: f.object.accepted_at.try(:strftime,INOCRM_CONFIG["short_date_format"])}
    .col-md-4.small_scale_margin-top2
      = f.input :documnet_received, wrapper: :append, label: "Signed Document Received"
  - have_instalments = false
  - if not contract_product_required
    .col-md-2
      = f.input :amount
  - else
    %h4
      %font{:color => "black"}
        %strong Installments
    .col-md-8
      %table.table.table-bordered
        %thead
          %tr
            %th Installments
            %th Installment Start Date
            %th Installment End Date
            %th Installment Amount
            %th Total Amount
        %tbody
          - @installments.each do |i|
            - if i.contract_id == contract.id
              - have_instalments = true
              %tr
                %td= i.payment_installment
                %td= i.installment_start_date.try :strftime, INOCRM_CONFIG["short_date_format"]
                %td= i.installment_end_date.try :strftime, INOCRM_CONFIG["short_date_format"]
                %td= i.installment_amount
                %td= i.total_amount
      
    %br
    .row
      .col-md-8
        - if have_instalments
          = link_to delete_instalments_contracts_path(contract_id: contract.id), method: :delete, rel: "tooltip", :data => { :confirm => 'Are you sure?', toggle: "tooltip", placement: "bottom" }, title: "Delete" do
            %button.btn.btn-info{:type => "button" } Delete Instalments
        - else
          %button.btn.btn-info{:type => "button", onclick:"Tickets.calculate_installments();" } Add Instalments
        %br
        %br
        #load_permissions_json_render

  %br
  .row
    .col-md-10
      = f.input :remarks

  - if can?(:generate_contract_document, TicketContract)
    .row
      = f.simple_fields_for :contract_attachments do |d|
        .col-md-2
          = d.link_to_remove "Remove"
        .col-md-6
          - if d.object.persisted?
            = link_to d.object.attachment_url.file.filename, d.object.attachment_url.url, target: "_blank"
          - else
            #document_attachment_upload.btn.btn-info.btn-mini.fileinput-button{style: "min-height: 10px;"}
              %span Upload attachment
              = d.file_field :attachment_url
        %hr
      .col-md-5
        = f.link_to_add "Add Attachment", :contract_attachments
    %hr
    .row
      .col-md-3
        = label_tag "Select Annexture"
        = select_tag "contract_document[annexture_id][]", options_from_collection_for_select(Documents::Annexture.all, :id, :name), multiple: true, class: "form-control"

      .col-md-9
        .row
          .col-md-12
            #document_attachment_wrapper

          .col-md-12
            .row
              .col-md-4.strong Name
              .col-md-4.strong Document
              .col-md-4.strong Actions
            .row
              - f.object.contract_documents.each do |contract_document|
                %div{id: "contract_document_wrapper_#{contract_document.id}"}
                  .col-md-4= contract_document.name
                  .col-md-4{id: "contract_document_#{contract_document.id}"}= link_to contract_document.document_url.file.filename, contract_document.document_url.url, target: "_blank"
                  .col-md-4
                    .btn.btn-info.btn-mini.fileinput-button{style: "min-height: 10px;"}
                      %span Upload
                      = file_field_tag 'generated_document', class: "btn btn-link generated_document_file_path", data: {url: "contracts/upload_generated_document", type: "post", updatedom: "contract_document_#{contract_document.id}", contractdocumentid: contract_document.id}
                    |
                    = link_to "Remove", remove_generated_document_contracts_path(contract_document_id: contract_document.id, wrapper: "contract_document_wrapper_#{contract_document.id}"), method: :delete, remote: true, data: {confirm: "Are you sure? Do you want to remove?"}

          .col-md-12
            Generated count: #{contract.document_generated_count.to_i}
            |
            Last Generated at: #{contract.last_doc_generated_at.try(:strftime, "%d-%m-%Y")}
            |
            Last Generated by: #{User.find_by_id(contract.last_doc_generated_by).try(:full_name)}

    %hr
    .row
      .col-md-5
        .col-md-1
        %br
        %h4
          %strong Products for selected contract
      .col-md-6
        = collapse_wrapper collapse_id: "products_collapse", labelledby: "products_collapse_labelledby" do
          .row
            = f.simple_fields_for :contract_products do |c|
              - c.object.build_product unless c.object.product.present?

              = c.simple_fields_for :product do |p|
                - if p.object.id.present?
                  = collapse collapse_type: "info", labelledby: "labelledby_#{p.object.id}", header_content: "Product: #{p.object.product_brand.try(:name)}:#{p.object.product_category.try(:name)}:#{p.object.serial_no}", collapse_link: "invunitlink_#{p.object.id}", collapse_id: "products_collapse" do
                    .col-md-12
                      / - if p.object.tickets.any?
                      - product = p.object
                      / - product = c.object.product
                      - contrac = c.object
                      %dl.dl-horizontal
                        %dt Serial No
                        %dd= product.serial_no
                        %dt Product Brand
                        %dd= product.product_brand.try(:name)
                        %dt Product Category
                        %dd= product.category_full_name_index
                        %dt Model No
                        %dd= product.model_no
                        %dt Product No
                        %dd= product.product_no
                        %dt Amount
                        %dd
                          -if !contract.accepted_at.present?
                            = link_to "#", class: "inline_edit cus_product_amount1", data: {type: "text", resource: "contract_product", name: "amount",url: update_contract_product_contracts_path(contract_product_id: contrac.id), "original-title" => "Update Amount"} do
                              = contrac.try(:amount)
                          -else
                            = contrac.try(:amount)
                        %dt Discount Amount
                        %dd
                          -if !contract.accepted_at.present?
                            = link_to "#", class: "inline_edit cus_product_disamount1", data: {type: "text", resource: "contract_product", name: "discount_amount",url: update_contract_product_contracts_path(contract_product_id: contrac.id), "original-title" => "Update Discount Amount"} do
                              = contrac.try(:discount_amount)
                          - else
                            = contrac.try(:discount_amount)
                        %dt Installed Address
                        %dd
                          -if !contract.accepted_at.present?
                            = link_to "#", class: "inline_edit", data: {type: "select", resource: "contract_product", source:organization.addresses.collect{|address| {value: address.id, text: address.try(:full_address)}}, name: "location_address_id", url: update_contract_product_contracts_path(contract_product_id: contrac.id), "original-title" => "Update Installed Address"} do
                              = contrac.location_address.try(:full_address)
                          - else
                            = contrac.location_address.try(:full_address)
                        %dt Installed Location
                        %dd
                          -if !contract.accepted_at.present?
                            = link_to "#", class: "inline_edit", data: {type: "select", resource: "contract_product", source:organization.anchestors.map{|m| m[:member]}.uniq{|m| m.id}.collect{|org| {value: org.id, text: org.try(:name)}}, name: "installed_location_id", url: update_contract_product_contracts_path(contract_product_id: contrac.id), "original-title" => "Update Installed Address"} do
                              = contrac.installed_location.try(:name)
                          - else
                            = contrac.installed_location.try(:name)
                        %dt Remark
                        %dd
                          -if !contract.accepted_at.present?
                            = link_to "#", class: "inline_edit", data: {type: "text", resource: "contract_product", name: "remarks",url: update_contract_product_contracts_path(contract_product_id: contrac.id), "original-title" => "Update remarks"} do
                              = contrac.try(:remarks)
                          -else
                            = contrac.try(:remarks)
                      %br
                        = link_to "View", contracts_path(view_product: true, product_id: product.id, contract_id:contrac.id), remote: false, class: "btn btn-sm btn-warning", target: "_blank"
                        - if p.object.cannot_removable_from_contract?(contract.id) || contract.accepted_at.present?

                        - else
                          = c.link_to_remove  class: "remove_c_t_v_link",:data => { :confirm => 'Are you sure?', toggle: "tooltip", placement: "bottom" }, title: "Remove" do
                            %button.btn.btn-danger{ onclick:"Tickets.count_down_remove_product();"} Remove
                %br
  -if !contract.accepted_at.present?
    .row
      #selectedproducts
    %button.btn.btn-info{"data-target" => "#productsModel", "data-toggle" => "modal", :type => "button", onclick:"Tickets.get_brand_id();" } Add Products

  .row
  .row
    %hr
    .col-md-2
      = f.association :contract_status, include_blank: false, label: "Status"
    .col-md-10
    .col-md-12
      = f.submit "Save", class: "btn btn-sm btn-success", remote: true, data: {disable_with: "Please wait..."}

%script#pop_doc_url_upload{type: "text/x-tmpl"}
  .pop_doc_url_upload.span12
    {%= o.name %}
    .progress
      .progress-bar.progress-bar-success.progress-bar-striped{role: "progressbar", "aria-valuemax" => 100, "aria-valuemin" => 0, "aria-valuenow" => 0}


#productsModel.modal.fade{:role => "dialog"}
  .modal-dialog.modal-lg
    / Modal content
    .modal-content
      .modal-header
        %button.close{"data-dismiss" => "modal", :type => "button"}
        %h3.modal-title Search Product
      .modal-body
        / = form_tag "#", method: :post, remote: true do
        = form_tag search_product_contract_contracts_path(customer_id: organization.id, contract_id: contract.id, new_contract: params[:new_contract]), method: :get, remote: true do
          .row
            .col-md-2
              = label_tag "Decendent Customer"
              = check_box_tag "decendent_customer", nil, checked = true
          .row
            .col-md-10
              = hidden_field_tag :product_brand
              = hidden_field_tag :product_category1
              = hidden_field_tag :product_category2
              = hidden_field_tag :product_category3
              / = text_field_tag :product_category11, contract.product_category.try(:product_category2).try(:product_category1).try(:id)
              / = text_field_tag :product_category22, contract.product_category.try(:product_category2).try(:id)
              / = text_field_tag :product_category33, contract.product_category.try(:id)
              = text_field_tag "query", params[:query], class: "form-control", placeholder: "Type any. for target search"
            .col-md-2
              = submit_tag "Search", :name => "search_product", class: "btn btn-sm btn-success"
        .col-md-12
          #searchproduct
      .modal-footer
        .col-md-12
          %button.btn.btn-default{"data-dismiss" => "modal", :type => "button"} Close
          / = submit_tag "Done", :name => "done", class: "btn btn-sm btn-success btn-primary"

%script#document_attachment_upload_tmpl{type: "text/x-tmpl"}
  .profile_image_upload.span12
    {%= o.name %}
    .progress
      .progress-bar.progress-bar-success.progress-bar-striped{role: "progressbar", "aria-valuemax" => 100, "aria-valuemin" => 0, "aria-valuenow" => 0}

%script{type: "text/html", id: "load_files"}
  = render "uploaded_generated_document"

%script{type: "text/html", id: "load_installments"}
  = render "load_installments"


= javascript_tag do
  $('#productsModel').on('hidden.bs.modal', function (e) {
  $("#searchproduct").empty();
  });