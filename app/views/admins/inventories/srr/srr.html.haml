- if @srr
  = simple_nested_form_for @srr, url: create_srr_admins_inventories_path, html: {class: "validate_form"} do |f|
    = f.input :created_by, as: :hidden
    = f.input :srr_no, as: :hidden, input_html: {value: CompanyConfig.first.next_inv_last_srr_no}
    = f.input :store_id, as: :hidden
    = f.input :requested_module_id, as: :hidden

    .row
      .col-md-12
        - if @srr.errors.any?
          %ul
            - @srr.errors.full_messages.each do |error|
              %li.alert.alert-danger= error
      .col-md-6
        %strong SRR No:
        = CompanyConfig.first.next_inv_last_srr_no.to_s.rjust(5, INOCRM_CONFIG["inventory_srr_no_format"])
        %br/
        %strong Store:
        = f.object.store.name

      .col-md-6.text-right
        %strong Created by:
        = current_user.full_name
        %br/
        %strong Created at:
        = DateTime.now.strftime("%Y-%m-%d %H:%M")
    %hr

    .row
      .col-md-3
        %h4 SRN
      .col-md-9
        %dl.dl-horizontal
          %dt SRN No:
          %dd= @gin.srn.formatted_srn_no
          %dt Required date:
          %dd= @gin.srn.created_at.try(:strftime, INOCRM_CONFIG["short_date_format"])
          %dt Created by:
          %dd= @gin.srn.created_by_user.full_name
          %dt Created at:
          %dd= @gin.srn.created_at.strftime(INOCRM_CONFIG["short_date_format"])
          %dt Remarks:
          %dd= simple_format @gin.srn.remarks

    %hr
    .row
      .col-md-3
        %h4 GIN

      .col-md-9
        %dl.dl-horizontal
          %dt GIN No:
          %dd= @gin.formatted_gin_no
          %dt GIN date:
          %dd= @gin.created_at.try(:strftime, INOCRM_CONFIG["short_date_format"])
          %dt Created by:
          %dd= @gin.created_by_user_full_name
          %dt Created at:
          %dd= @gin.created_at.strftime(INOCRM_CONFIG["short_date_format"])
          %dt Remarks:
          %dd= simple_format @gin.remarks
    %hr

    = f.simple_fields_for :srr_items do |g|
      = g.input :product_id, as: :hidden
      = g.input :product_condition_id, as: :hidden
      = g.input :spare_part, as: :hidden
      = g.input :currency_id, as: :hidden

      .row
        .col-md-3
          %h4 Product Information
        .col-md-9
          %dl.dl-horizontal.accumulated_wrapper
            %dt Item code:
            %dd= g.object.inventory_product.generated_item_code
            %dt Item description:
            %dd= g.object.inventory_product.description
            %dt Requested quantity
            %dd= g.object.inventory_product.srn_items.by_store(f.object.store.id).sum(:quantity)
            %dt Stock in hand
            %dd= g.object.inventory_product.inventories.where(store_id: f.object.store.id).to_a.sum{|i| i.inventory_stock_quantity}
            %dt Order unit
            %dd= g.object.inventory_product.inventory_unit.unit
            %dt Type
            %dd= g.object.inventory_product.product_type

            %dt Issued quantity
            %dd= g.object.srr_item_sources.to_a.sum{|s| s.gin_source.issued_quantity}

            %dt Balance to be issued:
            %dd= g.object.inventory_product.srn_items.by_store(f.object.store.id).sum(:quantity) - g.object.srr_item_sources.to_a.sum{|s| s.gin_source.issued_quantity} + g.object.srr_item_sources.to_a.sum{|s| s.gin_source.returned_quantity}

            %dt Returned quantity
            %dd= g.object.srr_item_sources.to_a.sum{|s| s.gin_source.returned_quantity}
            %dt Return Reason
            %dd= g.association :return_reason, label_method: :reason, label: false, required: true
            %dt Remarks
            %dd= g.input :remarks, label: false

            = g.input :quantity, as: :hidden, input_html: {class: "accumulated_required_qty_input", data: {preVal: 0, maxQty: g.object.srr_item_sources.to_a.sum{ |s| s.gin_source.issued_quantity.to_f-s.gin_source.returned_quantity.to_f } } }

            %strong Return quantity:
            %span.accumulated_required_qty_text

            = g.simple_fields_for :srr_item_sources do |s|
              = s.input :unit_cost, as: :hidden
              = s.input :currency_id, as: :hidden
              = s.input :gin_source_id, as: :hidden

              - if g.object.inventory_product.product_type == "Serial"
                = s.input :returned_quantity, as: :hidden, input_html: { class: "serial_return_qty", data: {preVal: 0} }

                = label_tag "Return", "Return"
                = check_box_tag "serial_return[]", s.object.gin_source.grn_serial_item.inventory_serial_item.id, false, onchange: "Admins.accumulated_qnty(this); return false;", class: "serial_return_checkbox"

                = render "admins/inventories/srr/serial_part_info", serial_item: s.object.gin_source.grn_serial_item.inventory_serial_item

              - elsif g.object.inventory_product.product_type == "Batch"
                %fieldset
                  %legend Batch No: #{s.object.gin_source.grn_batch.inventory_batch.batch_no}
                  = s.input :returned_quantity, as: :string, input_html: {oninput: "Admins.accumulated_qnty(this); return false;", data: {preVal: 0 } }

                  = render "admins/inventories/srr/batch_info", batch: s.object.gin_source.grn_batch.inventory_batch

              - elsif g.object.inventory_product.product_type == "Non Serial Non Batch"
                = s.input :returned_quantity, as: :string, input_html: {oninput: "Admins.accumulated_qnty(this); return false;", data: {preVal: 0} }

    %hr
    .row
      .col-md-12
        = f.input :remarks
      .col-md-12
        = f.submit "Save", class: "btn btn-sm btn-success"

- else
  = render "admins/searches/gin/search_gin"